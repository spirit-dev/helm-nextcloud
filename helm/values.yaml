nextcloudContext:
  redis:
    enabled: true
  mariadb:
    enabled: true
  postgresql:
    enabled: false

nextcloud:
  ## ref: https://hub.docker.com/r/library/nextcloud/tags/
  ##
  image:
    repository: nextcloud
    flavor: apache
    # default is generated by flavor and appVersion
    tag:
    pullPolicy: IfNotPresent
    # pullSecrets:
    #   - myRegistrKeySecretName

  nameOverride: ""
  fullnameOverride: ""
  podAnnotations: {}
  deploymentAnnotations: {}
  deploymentLabels: {}

  # Number of replicas to be deployed
  replicaCount: 1

  ## Allowing use of ingress controllers
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    enabled: false
    # className: nginx
    annotations: {}
    #  nginx.ingress.kubernetes.io/proxy-body-size: 4G
    #  kubernetes.io/tls-acme: "true"
    #  cert-manager.io/cluster-issuer: letsencrypt-prod
    #  # Keep this in sync with the README.md:
    #  nginx.ingress.kubernetes.io/server-snippet: |-
    #    server_tokens off;
    #    proxy_hide_header X-Powered-By;
    #    rewrite ^/.well-known/webfinger /index.php/.well-known/webfinger last;
    #    rewrite ^/.well-known/nodeinfo /index.php/.well-known/nodeinfo last;
    #    rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
    #    rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
    #    location = /.well-known/carddav {
    #      return 301 $scheme://$host/remote.php/dav;
    #    }
    #    location = /.well-known/caldav {
    #      return 301 $scheme://$host/remote.php/dav;
    #    }
    #    location = /robots.txt {
    #      allow all;
    #      log_not_found off;
    #      access_log off;
    #    }
    #    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
    #      deny all;
    #    }
    #    location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
    #      deny all;
    #    }
    # tls:
    #   - secretName: nextcloud-tls
    #     hosts:
    #       - nextcloud.kube.home
    labels: {}
    path: /
    pathType: Prefix

  # Allow configuration of lifecycle hooks
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
  lifecycle:
    {}
    # postStartCommand: []
    # preStopCommand: []

  phpClientHttpsFix:
    enabled: false
    protocol: https

  nextcloud:
    host: nextcloud.kube.home
    username: admin
    password: changeme # pragma: allowlist secret
    ## Use an existing secret
    existingSecret:
      enabled: false
      # secretName: nameofsecret
      usernameKey: nextcloud-username
      passwordKey: nextcloud-password # pragma: allowlist secret
      tokenKey: ""
      smtpUsernameKey: smtp-username
      smtpPasswordKey: smtp-password # pragma: allowlist secret
      smtpHostKey: smtp-host
    update: 0
    # If web server is not binding default port, you can define it
    containerPort: 80
    datadir: /var/www/html/data
    persistence:
      subPath:
    # if set, we'll template this list to the NEXTCLOUD_TRUSTED_DOMAINS env var
    trustedDomains: []
    ## SMTP configuration
    mail:
      enabled: false
      # the user we send email as
      fromAddress: user
      # the domain we send email from
      domain: domain.com
      smtp:
        host: domain.com
        secure: ssl
        port: 465
        authtype: LOGIN
        name: user
        password: pass # pragma: allowlist secret
    ## Primary ObjectStore options
    # see: https://docs.nextcloud.com/server/latest/admin_manual/configuration_files/primary_storage.html#configuring-object-storage-as-primary-storage
    objectStore:
      # https://docs.nextcloud.com/server/latest/admin_manual/configuration_files/primary_storage.html#simple-storage-service-s3
      s3:
        enabled: false
        # ignored if nextcloud.objectstore.s3.existingSecret is not empty string
        accessKey: ""
        # ignored if nextcloud.objectstore.s3.existingSecret is not empty string
        secretKey: ""
        # use legacy auth method
        legacyAuth: false
        # s3 endpoint to use; only required if you're not using AWS
        host: ""
        # use TLS/SSL for S3 connections
        ssl: true
        # default port that can be changed based on your object store, e.g. for minio, you can use 9000
        port: "443"
        # this is the default in the nextcloud docs
        region: "eu-west-1"
        # required if using s3, the name of the bucket you'd like to use
        bucket: ""
        # object prefix in bucket
        prefix: ""
        # set to true if you are not using DNS for your buckets.
        usePathStyle: false
        # autocreate the bucket
        autoCreate: false
        # optonal parameter: you probably want to keep this as default
        storageClass: "STANDARD"
        # server side encryption key. learn more: https://docs.nextcloud.com/server/latest/admin_manual/configuration_files/primary_storage.html#s3-sse-c-encryption-support
        sse_c_key: ""
        # use an existingSecret for S3 credentials. If set, we ignore the following under nextcloud.objectStore.s3
        # endpoint, accessKey, secretKey
        existingSecret: ""
        secretKeys:
          # key in nextcloud.objectStore.s3.existingSecret to use for s3 endpoint
          host: ""
          # key in nextcloud.objectStore.s3.existingSecret to use for s3 accessKeyID
          accessKey: ""
          # key in nextcloud.objectStore.s3.existingSecret to use for s3 secretAccessKey
          secretKey: ""
          # key in nextcloud.objectStore.s3.existingSecret to use for the s3 bucket
          bucket: ""
          # key in nextcloud.objectStore.s3.existingSecret to use for the s3 sse_c_key
          sse_c_key: ""
      ## options related to using Swift as a primary object storage
      # https://docs.nextcloud.com/server/latest/admin_manual/configuration_files/primary_storage.html#openstack-swift
      swift:
        enabled: false
        # swift user info
        user:
          domain: "Default"
          name: ""
          password: ""
        # swift project info
        project:
          name: ""
          domain: "Default"
        # The Identity / Keystone endpoint
        url: ""
        region: ""
        # optional on some swift implementations
        service: "swift"
        # the container to store the data in
        container: ""
        # autocreate container
        autoCreate: false

    ## PHP Configuration files
    # Will be injected in /usr/local/etc/php/conf.d for apache image and in /usr/local/etc/php-fpm.d when nginx.enabled: true
    phpConfigs: {}
    ## Default config files that utilize environment variables:
    # see: https://github.com/nextcloud/docker/tree/master#auto-configuration-via-environment-variables
    # IMPORTANT: Will be used only if you put extra configs, otherwise default will come from nextcloud itself
    # Default confgurations can be found here: https://github.com/nextcloud/docker/tree/master/.config
    defaultConfigs:
      # To protect /var/www/html/config
      .htaccess: true
      # Apache configuration for rewrite urls
      apache-pretty-urls.config.php: true
      # Define APCu as local cache
      apcu.config.php: true
      # Apps directory configs
      apps.config.php: true
      # Used for auto configure database
      autoconfig.php: true
      # Redis default configuration
      redis.config.php: true
      # Reverse proxy default configuration
      reverse-proxy.config.php: true
      # S3 Object Storage as primary storage
      s3.config.php: true
      # SMTP default configuration via environment variables
      smtp.config.php: true
      # Swift Object Storage as primary storage
      swift.config.php: true
      # disables the web based updater as the default nextcloud docker image does not support it
      upgrade-disable-web.config.php: true
      # -- imaginary support config
      imaginary.config.php: false

    # Extra config files created in /var/www/html/config/
    # ref: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/config_sample_php_parameters.html#multiple-config-php-file
    configs: {}
    # For example, to enable image and text file previews:
    #  previews.config.php: |-
    #    <?php
    #    $CONFIG = array (
    #      'enable_previews' => true,
    #      'enabledPreviewProviders' => array (
    #        'OC\Preview\Movie',
    #        'OC\Preview\PNG',
    #        'OC\Preview\JPEG',
    #        'OC\Preview\GIF',
    #        'OC\Preview\BMP',
    #        'OC\Preview\XBitmap',
    #        'OC\Preview\MP3',
    #        'OC\Preview\MP4',
    #        'OC\Preview\TXT',
    #        'OC\Preview\MarkDown',
    #        'OC\Preview\PDF'
    #      ),
    #    );

    # Hooks for auto configuration
    # Here you could write small scripts which are placed in `/docker-entrypoint-hooks.d/<hook-name>/helm.sh`
    # ref: https://github.com/nextcloud/docker?tab=readme-ov-file#auto-configuration-via-hook-folders
    hooks:
      pre-installation:
      post-installation:
      pre-upgrade:
      post-upgrade:
      before-starting:

    ## Strategy used to replace old pods
    ## IMPORTANT: use with care, it is suggested to leave as that for upgrade purposes
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    strategy:
      type: Recreate
      # type: RollingUpdate
      # rollingUpdate:
      #   maxSurge: 1
      #   maxUnavailable: 0

    ##
    ## Extra environment variables
    extraEnv:
    #  - name: SOME_SECRET_ENV
    #    valueFrom:
    #      secretKeyRef:
    #        name: nextcloud
    #        key: secret_key

    # Extra init containers that runs before pods start.
    extraInitContainers: []
    #  - name: do-something
    #    image: busybox
    #    command: ['do', 'something']

    # Extra sidecar containers.
    extraSidecarContainers: []
    #  - name: nextcloud-logger
    #    image: busybox
    #    command: [/bin/sh, -c, 'while ! test -f "/run/nextcloud/data/nextcloud.log"; do sleep 1; done; tail -n+1 -f /run/nextcloud/data/nextcloud.log']
    #    volumeMounts:
    #    - name: nextcloud-data
    #      mountPath: /run/nextcloud/data

    # Extra mounts for the pods. Example shown is for connecting a legacy NFS volume
    # to NextCloud pods in Kubernetes. This can then be configured in External Storage
    extraVolumes:
    #  - name: nfs
    #    nfs:
    #      server: "10.0.0.1"
    #      path: "/nextcloud_data"
    #      readOnly: false
    extraVolumeMounts:
    #  - name: nfs
    #    mountPath: "/legacy_data"

    # Set securityContext parameters for the nextcloud CONTAINER only (will not affect nginx container).
    # For example, you may need to define runAsNonRoot directive
    securityContext: {}
    #   runAsUser: 33
    #   runAsGroup: 33
    #   runAsNonRoot: true
    #   readOnlyRootFilesystem: false

    # Set securityContext parameters for the entire pod. For example, you may need to define runAsNonRoot directive
    podSecurityContext: {}
    #   runAsUser: 33
    #   runAsGroup: 33
    #   runAsNonRoot: true
    #   readOnlyRootFilesystem: false

    # Settings for the MariaDB init container
    mariaDbInitContainer:
      resources: {}
      # Set mariadb initContainer securityContext parameters. For example, you may need to define runAsNonRoot directive
      securityContext: {}

    # Settings for the PostgreSQL init container
    postgreSqlInitContainer:
      resources: {}
      # Set postgresql initContainer securityContext parameters. For example, you may need to define runAsNonRoot directive
      securityContext: {}

  nginx:
    ## You need to set an fpm version of the image for nextcloud if you want to use nginx!
    enabled: false

    image:
      repository: nginx
      tag: alpine
      pullPolicy: IfNotPresent

    containerPort: 80
    # This configures nginx to listen on either IPv4, IPv6 or both
    ipFamilies:
      - IPv4
      # - IPv6
    config:
      # This generates the default nginx config as per the nextcloud documentation
      default: true
      headers:
        # -- HSTS settings
        # WARNING: Only add the preload option once you read about
        # the consequences in https://hstspreload.org/. This option
        # will add the domain to a hardcoded list that is shipped
        # in all major browsers and getting removed from this list
        # could take several months.
        # Example:
        # "Strict-Transport-Security": "max-age=15768000; includeSubDomains; preload;"
        "Strict-Transport-Security": ""
        "Referrer-Policy": "no-referrer"
        "X-Content-Type-Options": "nosniff"
        "X-Frame-Options": "SAMEORIGIN"
        "X-Permitted-Cross-Domain-Policies": "none"
        "X-Robots-Tag": "noindex, nofollow"
        "X-XSS-Protection": "1; mode=block"

      # Added in server block of default config.
      serverBlockCustom: |
        # set max upload size
        client_max_body_size 10G;
        client_body_timeout 300s;
        fastcgi_buffers 64 4K;
        fastcgi_read_timeout 3600s;

      custom:
      # custom: |-
      #     worker_processes  1;..

    resources: {}

    # Set nginx container securityContext parameters. For example, you may need to define runAsNonRoot directive
    securityContext: {}
    # the nginx alpine container default user is 82
    #   runAsUser: 82
    #   runAsGroup: 33
    #   runAsNonRoot: true
    #   readOnlyRootFilesystem: true

    ## Extra environment variables
    extraEnv: []
    #  - name: SOME_ENV
    #    value: ENV_VALUE

  internalDatabase:
    enabled: true
    name: nextcloud

  ##
  ## External database configuration
  ##
  externalDatabase:
    enabled: false

    ## Supported database engines: mysql or postgresql
    type: mysql

    ## Database host. You can optionally include a colon delimited port like "myhost:1234"
    host: ""

    ## Database user
    user: nextcloud

    ## Database password
    password: ""

    ## Database name
    database: nextcloud

    ## Use a existing secret
    existingSecret:
      enabled: false
      # secretName: nameofsecret
      usernameKey: db-username
      passwordKey: db-password # pragma: allowlist secret
      # hostKey: db-hostname-or-ip
      # databaseKey: db-name

  ##
  ## MariaDB chart configuration
  ## ref: https://github.com/bitnami/charts/tree/main/bitnami/mariadb
  ##
  mariadb:
    ## Whether to deploy a mariadb server from the bitnami mariab db helm chart
    # to satisfy the applications database requirements. if you want to deploy this bitnami mariadb, set this and externalDatabase to true
    # To use an ALREADY DEPLOYED mariadb database, set this to false and configure the externalDatabase parameters
    enabled: false

    # see: https://github.com/bitnami/charts/tree/main/bitnami/mariadb#global-parameters
    global:
      # overwrites the primary.persistence.storageClass value
      defaultStorageClass: ""

    auth:
      database: nextcloud
      username: nextcloud
      password: changeme # pragma: allowlist secret
      # Use existing secret (auth.rootPassword, auth.password, and auth.replicationPassword will be ignored).
      # secret must contain the keys mariadb-root-password, mariadb-replication-password and mariadb-password
      existingSecret: ""

    architecture: standalone

    ## Enable persistence using Persistent Volume Claims
    ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    primary:
      persistence:
        enabled: false
        # Use an existing Persistent Volume Claim (must be created ahead of time)
        existingClaim: ""
        storageClass: ""
        accessMode: ReadWriteOnce
        size: 8Gi

  ##
  ## PostgreSQL chart configuration
  ## for more options see https://github.com/bitnami/charts/tree/main/bitnami/postgresql
  ##
  postgresql:
    enabled: false
    global:
      postgresql:
        # global.postgresql.auth overrides postgresql.auth
        auth:
          username: nextcloud
          password: changeme # pragma: allowlist secret
          database: nextcloud
          # Name of existing secret to use for PostgreSQL credentials.
          # auth.postgresPassword, auth.password, and auth.replicationPassword will be ignored and picked up from this secret.
          # secret might also contains the key ldap-password if LDAP is enabled.
          # ldap.bind_password will be ignored and picked from this secret in this case.
          existingSecret: ""
          # Names of keys in existing secret to use for PostgreSQL credentials
          secretKeys:
            adminPasswordKey: ""
            userPasswordKey: ""
            replicationPasswordKey: ""
    primary:
      persistence:
        enabled: false
        # Use an existing Persistent Volume Claim (must be created ahead of time)
        # existingClaim: ""
        # storageClass: ""

  ##
  ## External Redis configuration
  ##
  externalRedis:
    enabled: false

    ## Redis host
    host: ""

    ## Redis port
    port: "6379"

    ## Redis password
    password: ""

    ## Use a existing secret
    existingSecret:
      enabled: false
      # secretName: nameofsecret
      passwordKey: redis-password # pragma: allowlist secret

  ##
  ## Redis chart configuration
  ## for more options see https://github.com/bitnami/charts/tree/main/bitnami/redis
  ##

  redis:
    enabled: false
    auth:
      enabled: true
      password: "changeme" # pragma: allowlist secret
      # name of an existing secret with Redis® credentials (instead of auth.password), must be created ahead of time
      existingSecret: ""
      # Password key to be retrieved from existing secret
      existingSecretPasswordKey: ""
    # Since Redis is used for caching only, you might want to use a storageClass with different reclaim policy and backup settings
    global:
      storageClass: ""
    master:
      persistence:
        enabled: true
    replica:
      persistence:
        enabled: true

  ##
  ## Collabora chart configuration
  ## for more options see https://github.com/CollaboraOnline/online/tree/master/kubernetes/helm/collabora-online
  ##
  collabora:
    enabled: false

    autoscaling:
      # enable autocaling, please check collabora README.md first
      enabled: false

    collabora:
      ## HTTPS nextcloud domain, if needed
      aliasgroups: []
      #   - host: "https://nextcloud.domain:443"

      # set extra parameters for collabora
      # you may need to add --o:ssl.termination=true
      extra_params: --o:ssl.enable=false

      ## Specify server_name when the hostname is not reachable directly for
      # example behind reverse-proxy. example: collabora.domain
      server_name: null

      existingSecret:
        # set to true to to get collabora admin credentials from an existin secret
        # if set, ignores collabora.collabora.username and password
        enabled: false
        # name of existing Kubernetes Secret with collboara admin credentials
        secretName: ""
        usernameKey: "username"
        passwordKey: "password" # pragma: allowlist secret

      # setup admin login credentials, these are ignored if
      # collabora.collabora.existingSecret.enabled=true
      password: examplepass # pragma: allowlist secret
      username: admin

    # setup ingress
    ingress:
      # enable ingress for collabora online
      enabled: false
      className: ""
      # please check collabora values.yaml for nginx/haproxy annotations examples
      annotations: {}
      hosts:
        - host: chart-example.local
          paths:
            - path: /
              pathType: ImplementationSpecific
      tls: []
      #  - secretName: collabora-ingress-tls
      #    hosts:
      #      - collabora.domain

    # see collabora helm README.md for recommended values
    resources: {}

  ## Cronjob to execute Nextcloud background tasks
  ## ref: https://docs.nextcloud.com/server/latest/admin_manual/configuration_server/background_jobs_configuration.html#cron
  ##
  cronjob:
    enabled: false

    ## Cronjob sidecar resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ##
    resources: {}

    # Allow configuration of lifecycle hooks
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/attach-handler-lifecycle-event/
    lifecycle:
      {}
      # postStartCommand: []
      # preStopCommand: []
    # Set securityContext parameters. For example, you may need to define runAsNonRoot directive
    securityContext: {}
    #   runAsUser: 33
    #   runAsGroup: 33
    #   runAsNonRoot: true
    #   readOnlyRootFilesystem: true

    # The command the cronjob container executes.
    command:
      - /cron.sh

  service:
    type: ClusterIP
    port: 8080
    loadBalancerIP: ""
    nodePort:
    # -- use additional annotation on service for nextcloud
    annotations: {}
    # -- Set this to "ClientIP" to make sure that connections from the same client
    # are passed to the same Nextcloud pod each time.
    sessionAffinity: ""
    sessionAffinityConfig: {}

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    # Nextcloud Data (/var/www/html)
    enabled: false
    annotations: {}
    ## nextcloud data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

    ## A manually managed Persistent Volume and Claim
    ## Requires persistence.enabled: true
    ## If defined, PVC must be created manually before volume will be bound
    # existingClaim:

    accessMode: ReadWriteOnce
    size: 8Gi

    ## Use an additional pvc for the data directory rather than a subpath of the default PVC
    ## Useful to store data on a different storageClass (e.g. on slower disks)
    nextcloudData:
      enabled: false
      subPath:
      annotations: {}
      # storageClass: "-"
      # existingClaim:
      accessMode: ReadWriteOnce
      size: 8Gi

  resources:
    {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #  cpu: 100m
    #  memory: 128Mi
    # requests:
    #  cpu: 100m
    #  memory: 128Mi

  ## Liveness and readiness probe values
  ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  ##
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1

  ## Enable pod autoscaling using HorizontalPodAutoscaler
  ## ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/
  ##
  hpa:
    enabled: false
    cputhreshold: 60
    minPods: 1
    maxPods: 10

  nodeSelector: {}

  tolerations: []

  affinity: {}

  dnsConfig: {}
  # Custom dns config for Nextcloud containers.
  # You can for example configure ndots. This may be needed in some clusters with alpine images.
  # options:
  #   - name: ndots
  #     value: "1"

  imaginary:
    # -- Start Imgaginary
    enabled: false
    # -- Number of imaginary pod replicas to deploy
    replicaCount: 1

    image:
      # -- Imaginary image registry
      registry: docker.io
      # -- Imaginary image name
      repository: h2non/imaginary
      # -- Imaginary image tag
      tag: 1.2.4
      # -- Imaginary image pull policy
      pullPolicy: IfNotPresent
      # -- Imaginary image pull secrets
      pullSecrets: []

    # -- Additional annotations for imaginary
    podAnnotations: {}
    # -- Additional labels for imaginary
    podLabels: {}
    # -- Imaginary pod nodeSelector
    nodeSelector: {}
    # -- Imaginary pod tolerations
    tolerations: []

    # -- imaginary resources
    resources: {}

    # -- Optional security context for the Imaginary container
    securityContext:
      runAsUser: 1000
      runAsNonRoot: true
      # allowPrivilegeEscalation: false
      # capabilities:
      #   drop:
      #     - ALL

    # -- Optional security context for the Imaginary pod (applies to all containers in the pod)
    podSecurityContext: {}
    # runAsNonRoot: true
    # seccompProfile:
    #   type: RuntimeDefault

    readinessProbe:
      enabled: true
      failureThreshold: 3
      successThreshold: 1
      periodSeconds: 10
      timeoutSeconds: 1
    livenessProbe:
      enabled: true
      failureThreshold: 3
      successThreshold: 1
      periodSeconds: 10
      timeoutSeconds: 1

    service:
      # -- Imaginary: Kubernetes Service type
      type: ClusterIP
      # -- Imaginary: LoadBalancerIp for service type LoadBalancer
      loadBalancerIP:
      # -- Imaginary: NodePort for service type NodePort
      nodePort:
      # -- Additional annotations for service imaginary
      annotations: {}
      # -- Additional labels for service imaginary
      labels: {}

  ## Prometheus Exporter / Metrics
  ##
  metrics:
    enabled: false

    replicaCount: 1
    # Optional: becomes NEXTCLOUD_SERVER env var in the nextcloud-exporter container.
    # Without it, we will use the full name of the nextcloud service
    server: ""
    # The metrics exporter needs to know how you serve Nextcloud either http or https
    https: false
    # Use API token if set, otherwise fall back to password authentication
    # https://github.com/xperimental/nextcloud-exporter#token-authentication
    # Currently you still need to set the token manually in your nextcloud install
    token: ""
    timeout: 5s
    # if set to true, exporter skips certificate verification of Nextcloud server.
    tlsSkipVerify: false
    info:
      # Optional: becomes NEXTCLOUD_INFO_APPS env var in the nextcloud-exporter container.
      # Enables gathering of apps-related metrics. Defaults to false
      apps: false
      update: false

    image:
      repository: xperimental/nextcloud-exporter
      tag: 0.8.0
      pullPolicy: IfNotPresent
      # pullSecrets:
      #   - myRegistrKeySecretName

    ## Metrics exporter resource requests and limits
    ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ##
    resources: {}

    # -- Metrics exporter pod Annotation
    podAnnotations: {}

    # -- Metrics exporter pod Labels
    podLabels: {}

    # -- Metrics exporter pod nodeSelector
    nodeSelector: {}

    # -- Metrics exporter pod tolerations
    tolerations: []

    # -- Metrics exporter pod affinity
    affinity: {}

    service:
      type: ClusterIP
      # Use serviceLoadBalancerIP to request a specific static IP,
      # otherwise leave blank
      loadBalancerIP:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9205"
      labels: {}

    # -- security context for the metrics CONTAINER in the pod
    securityContext:
      runAsUser: 1000
      runAsNonRoot: true
      # allowPrivilegeEscalation: false
      # capabilities:
      #   drop:
      #     - ALL

    # -- security context for the metrics POD
    podSecurityContext: {}
    # runAsNonRoot: true
    # seccompProfile:
    #   type: RuntimeDefault

    ## Prometheus Operator ServiceMonitor configuration
    ##
    serviceMonitor:
      ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
      ##
      enabled: false

      ## @param metrics.serviceMonitor.namespace Namespace in which Prometheus is running
      ##
      namespace: ""

      ## @param metrics.serviceMonitor.namespaceSelector The selector of the namespace where the target service is located (defaults to the release namespace)
      namespaceSelector:

      ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
      ##
      jobLabel: ""

      ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
      ##
      interval: 30s

      ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
      ##
      scrapeTimeout: ""

      ## @param metrics.serviceMonitor.labels Extra labels for the ServiceMonitor
      ##
      labels: {}

    rules:
      # -- Deploy Prometheus Rules (Alerts) for the exporter
      # @section -- Metrics
      enabled: false
      # -- Label on Prometheus Rules CRD Manifest
      # @section -- Metrics
      labels: {}
      defaults:
        # -- Add Default Rules
        # @section -- Metrics
        enabled: true
        # -- Label on the rules (the severity is already set)
        # @section -- Metrics
        labels: {}
        # -- Filter on metrics on alerts (default just for this helm-chart)
        # @section -- Metrics
        filter: ""
      # -- Add own Rules to Prometheus Rules
      # @section -- Metrics
      additionalRules: []

  rbac:
    enabled: false
    serviceaccount:
      create: true
      name: nextcloud-serviceaccount
      annotations: {}

  ## @param securityContext for nextcloud pod @deprecated Use `nextcloud.podSecurityContext` instead
  securityContext: {}

nextcloud-db:
  # Copyright Broadcom, Inc. All Rights Reserved.
  # SPDX-License-Identifier: APACHE-2.0

  ## @section Global parameters
  ## Global Docker image parameters
  ## Please, note that this will override the image parameters, including dependencies, configured to use the global value
  ## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
  ##

  ## @param global.imageRegistry Global Docker Image registry
  ## @param global.imagePullSecrets Global Docker registry secret names as an array
  ## @param global.defaultStorageClass Global default StorageClass for Persistent Volume(s)
  ##
  global:
    imageRegistry: ""
    ## E.g.
    ## imagePullSecrets:
    ##   - myRegistryKeySecretName
    ##
    imagePullSecrets: []
    defaultStorageClass: ""
    ## Security parameters
    ##
    security:
      ## @param global.security.allowInsecureImages Allows skipping image verification
      allowInsecureImages: false
    ## Compatibility adaptations for Kubernetes platforms
    ##
    compatibility:
      ## Compatibility adaptations for Openshift
      ##
      openshift:
        ## @param global.compatibility.openshift.adaptSecurityContext Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)
        ##
        adaptSecurityContext: auto
  ## @section Common parameters
  ##

  ## @param kubeVersion Force target Kubernetes version (using Helm capabilities if not set)
  ##
  kubeVersion: ""
  ## @param nameOverride String to partially override mariadb.fullname
  ##
  nameOverride: ""
  ## @param fullnameOverride String to fully override mariadb.fullname
  ##
  fullnameOverride: ""
  ## @param clusterDomain Default Kubernetes cluster domain
  ##
  clusterDomain: cluster.local
  ## @param commonAnnotations Common annotations to add to all MariaDB resources (sub-charts are not considered)
  ##
  commonAnnotations: {}
  ## @param commonLabels Common labels to add to all MariaDB resources (sub-charts are not considered)
  ##
  commonLabels: {}
  ## @param schedulerName Name of the scheduler (other than default) to dispatch pods
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  schedulerName: ""
  ## @param runtimeClassName Name of the Runtime Class for all MariaDB pods
  ## ref: https://kubernetes.io/docs/concepts/containers/runtime-class/
  ##
  runtimeClassName: ""
  ## @param extraDeploy Array of extra objects to deploy with the release (evaluated as a template)
  ##
  extraDeploy: []
  ## Enable diagnostic mode in the deployment
  ##
  diagnosticMode:
    ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
    ##
    enabled: false
    ## @param diagnosticMode.command Command to override all containers in the deployment
    ##
    command:
      - sleep
    ## @param diagnosticMode.args Args to override all containers in the deployment
    ##
    args:
      - infinity
  ## @param serviceBindings.enabled Create secret for service binding (Experimental)
  ## Ref: https://servicebinding.io/service-provider/
  ##
  serviceBindings:
    enabled: false
  ## @section MariaDB common parameters
  ##

  ## Bitnami MariaDB image
  ## ref: https://hub.docker.com/r/bitnami/mariadb/tags/
  ## @param image.registry [default: REGISTRY_NAME] MariaDB image registry
  ## @param image.repository [default: REPOSITORY_NAME/mariadb] MariaDB image repository
  ## @skip image.tag MariaDB image tag (immutable tags are recommended)
  ## @param image.digest MariaDB image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param image.pullPolicy MariaDB image pull policy
  ## @param image.pullSecrets Specify docker-registry secret names as an array
  ## @param image.debug Specify if debug logs should be enabled
  ##
  image:
    registry: docker.io
    repository: bitnami/mariadb
    tag: 11.8.3-debian-12-r0
    digest: ""
    ## Specify a imagePullPolicy
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## Example:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
    ## Set to true if you would like to see extra information on logs
    ## It turns BASH and/or NAMI debugging in the image
    ##
    debug: false
  ## @param architecture MariaDB architecture (`standalone` or `replication`)
  ##
  architecture: standalone
  ## MariaDB Authentication parameters
  ##
  auth:
    ## @param auth.rootPassword Password for the `root` user. Ignored if existing secret is provided.
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mariadb#setting-the-root-password-on-first-run
    ##
    rootPassword: ""
    ## @param auth.database Name for a custom database to create
    ## ref: https://github.com/bitnami/containers/blob/main/bitnami/mariadb/README.md#creating-a-database-on-first-run
    ##
    database: my_database
    ## @param auth.username Name for a custom user to create
    ## ref: https://github.com/bitnami/containers/blob/main/bitnami/mariadb/README.md#creating-a-database-user-on-first-run
    ##
    username: ""
    ## @param auth.password Password for the new user. Ignored if existing secret is provided
    ##
    password: ""
    ## @param auth.replicationUser MariaDB replication user
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mariadb#setting-up-a-replication-cluster
    ##
    replicationUser: replicator
    ## @param auth.replicationPassword MariaDB replication user password. Ignored if existing secret is provided
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mariadb#setting-up-a-replication-cluster
    ##
    replicationPassword: ""
    ## @param auth.existingSecret Use existing secret for password details (`auth.rootPassword`, `auth.password`, `auth.replicationPassword` will be ignored and picked up from this secret). The secret has to contain the keys `mariadb-root-password`, `mariadb-replication-password` and `mariadb-password`
    ##
    existingSecret: ""
    ## @param auth.forcePassword Force users to specify required passwords
    ##
    forcePassword: false
    ## @param auth.usePasswordFiles Mount credentials as files instead of using environment variables
    ##
    usePasswordFiles: true
    ## @param auth.customPasswordFiles Use custom password files when `auth.usePasswordFiles` is set to `true`. Define path for keys `root` and `user`, also define `replicator` if `architecture` is set to `replication`
    ## Example:
    ## customPasswordFiles:
    ##   root: /vault/secrets/mariadb-root
    ##   user: /vault/secrets/mariadb-user
    ##   replicator: /vault/secrets/mariadb-replicator
    ##
    customPasswordFiles: {}
  ## @param initdbScripts Dictionary of initdb scripts
  ## Specify dictionary of scripts to be run at first boot
  ## Example:
  ## initdbScripts:
  ##   my_init_script.sh: |
  ##      #!/bin/bash
  ##      echo "Do something."
  ##
  initdbScripts: {}
  ## @param initdbScriptsConfigMap ConfigMap with the initdb scripts (Note: Overrides `initdbScripts`)
  ##
  initdbScriptsConfigMap: ""

  ## @section TLS/SSL parameters
  ##
  ## @param tls.enabled Enable TLS in MariaDB
  ## @param tls.existingSecret Existing secret that contains TLS certificates
  ## @param tls.certFilename The secret key from the existingSecret if 'cert' key different from the default (tls.crt)
  ## @param tls.certKeyFilename The secret key from the existingSecret if 'key' key different from the default (tls.key)
  ## @param tls.certCAFilename The secret key from the existingSecret if 'ca' key different from the default (tls.crt)
  ## @param tls.ca CA certificate for TLS. Ignored if `tls.existingSecret` is set
  ## @param tls.cert TLS certificate. Ignored if `tls.master.existingSecret` is set
  ## @param tls.key TLS key. Ignored if `tls.master.existingSecret` is set
  ##
  tls:
    enabled: false
    existingSecret: ""
    certFilename: tls.crt
    certKeyFilename: tls.key
    certCAFilename: ""
    ca: ""
    cert: ""
    key: ""
    ## @param tls.autoGenerated.enabled Enable automatic generation of certificates for TLS
    ## @param tls.autoGenerated.engine Mechanism to generate the certificates (allowed values: helm, cert-manager)
    autoGenerated:
      enabled: true
      engine: helm
      ## @param tls.autoGenerated.certManager.existingIssuer The name of an existing Issuer to use for generating the certificates (only for `cert-manager` engine)
      ## @param tls.autoGenerated.certManager.existingIssuerKind Existing Issuer kind, defaults to Issuer (only for `cert-manager` engine)
      ## @param tls.autoGenerated.certManager.keyAlgorithm Key algorithm for the certificates (only for `cert-manager` engine)
      ## @param tls.autoGenerated.certManager.keySize Key size for the certificates (only for `cert-manager` engine)
      ## @param tls.autoGenerated.certManager.duration Duration for the certificates (only for `cert-manager` engine)
      ## @param tls.autoGenerated.certManager.renewBefore Renewal period for the certificates (only for `cert-manager` engine)
      certManager:
        existingIssuer: ""
        existingIssuerKind: ""
        keySize: 2048
        keyAlgorithm: RSA
        duration: 2160h
        renewBefore: 360h

  ## @section Transparent Data Encryption parameters
  ## ref: https://mariadb.com/kb/en/file-key-management-encryption-plugin/
  ##
  ## @param tde.enabled Enable Transparent Data Encryption using the File Key Management Encryption Plugin for MariaDB
  ## @param tde.existingSecret Existing secret that contains Transparent Data Encryption key files used when secretsStoreProvider is not enabled
  ## @param tde.randomKeyFilename File name of the 'random keyfile' when it is different from the default (keyfile.key), is also used for key name in the existingSecret
  ## @param tde.encryptedKeyFilename File name of the 'encrypted keyfile' when it is different from the default (keyfile.enc), is also used for key name in the existingSecret
  ## @param tde.fileKeyManagementEncryptionAlgorithm Encryption algorithm used for encrypting data (allowed values: AES_CTR, AES_CBC | default: AES_CTR)
  ## @param tde.innodbEncryptTables Enables automatic encryption of all InnoDB tablespaces (allowed values: FORCE, ON, OFF | default: FORCE)
  ## @param tde.innodbEncryptLog Enables encryption of the InnoDB redo log (allowed values: ON, OFF | default: ON)
  ## @param tde.innodbEncryptTemporaryTables Enables automatic encryption of the InnoDB temporary tablespace (allowed values: ON, OFF | default: ON)
  ## @param tde.innodbEncryptionThreads Number of threads to use for encryption (default: 4)
  ## @param tde.encryptTmpDiskTables Enables automatic encryption of all internal on-disk temporary tables that are created during query execution (allowed values: ON, OFF | default: ON)
  ## @param tde.encryptTmpTiles Enables automatic encryption of temporary files, such as those created for filesort operations, binary log file caches, etc. (allowed values: ON, OFF | default: ON)
  ## @param tde.encryptBINLOG Enables encrypting binary logs including relay logs (allowed values: ON, OFF | default: ON)
  ## @param tde.ariaEncryptTables Enables automatic encryption of all Aria tablespaces (allowed values: ON, OFF | default: ON)
  ##
  tde:
    enabled: false
    existingSecret: ""
    randomKeyFilename: keyfile.key
    encryptedKeyFilename: keyfile.enc
    fileKeyManagementEncryptionAlgorithm: AES_CTR
    innodbEncryptTables: FORCE
    innodbEncryptLog: "ON"
    innodbEncryptTemporaryTables: "ON"
    encryptTmpDiskTables: "ON"
    encryptTmpTiles: "ON"
    encryptBINLOG: "ON"
    ariaEncryptTables: "ON"
    innodbEncryptionThreads: 4
    ## @param tde.secretsStoreProvider.enabled Enable use of secrets store provider for Transparent Data Encryption key files
    ## @param tde.secretsStoreProvider.provider Type of provider used in secrets store provider class (allowed values: vault)
    secretsStoreProvider:
      enabled: false
      provider: vault
      ## @param tde.secretsStoreProvider.vault.roleName The name of the HashiCorp Vault role used for accessing the key files (only for `vault` provider)
      ## @param tde.secretsStoreProvider.vault.address The URL of the HashiCorp Vault server (only for `vault` provider)
      ## @param tde.secretsStoreProvider.vault.authMountPath The HashiCorp Vault auth mount path (only for `vault` provider)
      ## @param tde.secretsStoreProvider.vault.randomKeySecretPath The HashiCorp Vault secret path for the 'random keyfile' (only for `vault` provider)
      ## @param tde.secretsStoreProvider.vault.randomKeySecretKey The HashiCorp Vault secret key for the 'random keyfile' (only for `vault` provider)
      ## @param tde.secretsStoreProvider.vault.encryptedKeySecretPath The HashiCorp Vault secret path for the 'encrypted keyfile' (only for `vault` provider)
      ## @param tde.secretsStoreProvider.vault.encryptedKeySecretKey The HashiCorp Vault secret key for the 'encrypted keyfile' (only for `vault` provider)
      vault:
        roleName: ""
        address: ""
        authMountPath: ""
        randomKeySecretPath: ""
        randomKeySecretKey: ""
        encryptedKeySecretPath: ""
        encryptedKeySecretKey: ""

  ## @section MariaDB Primary parameters
  ##

  ## Mariadb Primary parameters
  ##
  primary:
    ## @param primary.name Name of the primary database (eg primary, master, leader, ...)
    ##
    name: primary
    ## @param primary.command Override default container command on MariaDB Primary container(s) (useful when using custom images)
    ##
    command: []
    ## @param primary.args Override default container args on MariaDB Primary container(s) (useful when using custom images)
    ##
    args: []
    ## @param primary.lifecycleHooks for the MariaDB Primary container(s) to automate configuration before or after startup
    ##
    lifecycleHooks: {}
    ## @param primary.automountServiceAccountToken Mount Service Account token in pod
    ##
    automountServiceAccountToken: false
    ## @param primary.hostAliases Add deployment host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    ##
    hostAliases: []
    ## @param primary.containerPorts.mysql Container port for mysql
    ##
    containerPorts:
      mysql: 3306
    ## @param primary.configuration [string] MariaDB Primary configuration to be injected as ConfigMap
    ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
    ##
    configuration: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      datadir=/bitnami/mariadb/data
      plugin_dir=/opt/bitnami/mariadb/plugin
      port={{ .Values.primary.containerPorts.mysql }}
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=*
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      slow_query_log=0
      long_query_time=10.0
      binlog_expire_logs_seconds=2592000
      {{- if .Values.tls.enabled }}
      ssl_cert=/opt/bitnami/mariadb/certs/{{ .Values.tls.certFilename }}
      ssl_key=/opt/bitnami/mariadb/certs/{{ .Values.tls.certKeyFilename }}
      {{- if (include "mariadb.tlsCACert" .) }}
      ssl_ca={{ include "mariadb.tlsCACert" . }}
      {{- end }}
      {{- end }}
      {{- if .Values.tde.enabled }}
      plugin_load_add=file_key_management
      file_key_management_filename=/opt/bitnami/mariadb/tde/{{ .Values.tde.encryptedKeyFilename }}
      file_key_management_filekey=FILE:/opt/bitnami/mariadb/tde/{{ .Values.tde.randomKeyFilename }}
      file_key_management_encryption_algorithm={{ .Values.tde.fileKeyManagementEncryptionAlgorithm }}
      innodb_encrypt_tables={{ .Values.tde.innodbEncryptTables }}
      innodb_encrypt_log={{ .Values.tde.innodbEncryptLog }}
      innodb_encrypt_temporary_tables={{ .Values.tde.innodbEncryptTemporaryTables }}
      innodb_encryption_threads={{ .Values.tde.innodbEncryptionThreads }}
      encrypt_tmp_disk_tables={{ .Values.tde.encryptTmpDiskTables }}
      encrypt_tmp_files={{ .Values.tde.encryptTmpTiles }}
      encrypt_binlog={{ .Values.tde.encryptBINLOG }}
      aria_encrypt_tables={{ .Values.tde.ariaEncryptTables }}
      {{- end }}

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8
      plugin_dir=/opt/bitnami/mariadb/plugin

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    ## @param primary.existingConfigmap Name of existing ConfigMap with MariaDB Primary configuration.
    ## NOTE: When it's set the 'configuration' parameter is ignored
    ##
    existingConfigmap: ""
    ## @param primary.updateStrategy.type MariaDB primary statefulset strategy type
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    ##
    updateStrategy:
      ## StrategyType
      ## Can be set to RollingUpdate or OnDelete
      ##
      type: RollingUpdate
    ## @param primary.rollingUpdatePartition Partition update strategy for Mariadb Primary statefulset
    ## https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#partitions
    ##
    rollingUpdatePartition: ""
    ## @param primary.podAnnotations Additional pod annotations for MariaDB primary pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}
    ## @param primary.podLabels Extra labels for MariaDB primary pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    ##
    podLabels: {}
    ## @param primary.podAffinityPreset MariaDB primary pod affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAffinityPreset: ""
    ## @param primary.podAntiAffinityPreset MariaDB primary pod anti-affinity preset. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
    ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAntiAffinityPreset: soft
    ## Mariadb Primary node affinity preset
    ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
    ##
    nodeAffinityPreset:
      ## @param primary.nodeAffinityPreset.type MariaDB primary node affinity preset type. Ignored if `primary.affinity` is set. Allowed values: `soft` or `hard`
      ##
      type: ""
      ## @param primary.nodeAffinityPreset.key MariaDB primary node label key to match Ignored if `primary.affinity` is set.
      ## E.g.
      ## key: "kubernetes.io/e2e-az-name"
      ##
      key: ""
      ## @param primary.nodeAffinityPreset.values MariaDB primary node label values to match. Ignored if `primary.affinity` is set.
      ## E.g.
      ## values:
      ##   - e2e-az1
      ##   - e2e-az2
      ##
      values: []
    ## @param primary.affinity Affinity for MariaDB primary pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
    ##
    affinity: {}
    ## @param primary.nodeSelector Node labels for MariaDB primary pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
    ##
    nodeSelector: {}
    ## @param primary.tolerations Tolerations for MariaDB primary pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []
    ## @param primary.schedulerName Name of the k8s scheduler (other than default)
    ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
    ##
    schedulerName: ""
    ## @param primary.terminationGracePeriodSeconds In seconds, time the given to the MySQL primary pod needs to terminate gracefully
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
    ##
    terminationGracePeriodSeconds: ""
    ## @param primary.podManagementPolicy podManagementPolicy to manage scaling operation of MariaDB primary pods
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
    ##
    podManagementPolicy: ""
    ## @param primary.topologySpreadConstraints Topology Spread Constraints for MariaDB primary pods assignment
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
    ## E.g.
    ## topologySpreadConstraints:
    ##   - maxSkew: 1
    ##     topologyKey: topology.kubernetes.io/zone
    ##     whenUnsatisfiable: DoNotSchedule
    ##
    topologySpreadConstraints: []
    ## @param primary.priorityClassName Priority class for MariaDB primary pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
    ##
    priorityClassName: ""
    ## @param primary.runtimeClassName Runtime Class for MariaDB primary pods
    ## Ref: https://kubernetes.io/docs/concepts/containers/runtime-class/
    ##
    runtimeClassName: ""
    ## MariaDB primary Pod security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param primary.podSecurityContext.enabled Enable security context for MariaDB primary pods
    ## @param primary.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
    ## @param primary.podSecurityContext.sysctls Set kernel settings using the sysctl interface
    ## @param primary.podSecurityContext.supplementalGroups Set filesystem extra groups
    ## @param primary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
    ##
    podSecurityContext:
      enabled: true
      fsGroupChangePolicy: Always
      sysctls: []
      supplementalGroups: []
      fsGroup: 1001
    ## MariaDB primary container security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param primary.containerSecurityContext.enabled MariaDB primary container securityContext
    ## @param primary.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param primary.containerSecurityContext.runAsUser User ID for the MariaDB primary container
    ## @param primary.containerSecurityContext.runAsGroup Group ID for the MariaDB primary container
    ## @param primary.containerSecurityContext.runAsNonRoot Set primary container's Security Context runAsNonRoot
    ## @param primary.containerSecurityContext.privileged Set primary container's Security Context privileged
    ## @param primary.containerSecurityContext.allowPrivilegeEscalation Set primary container's Security Context allowPrivilegeEscalation
    ## @param primary.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
    ## @param primary.containerSecurityContext.capabilities.drop List of capabilities to be dropped
    ## @param primary.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
    ##
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    ## MariaDB primary container's resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## @param primary.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if primary.resources is set (primary.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "small"
    ## @param primary.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## Configure extra options for MariaDB primary containers' liveness, readiness and startup probes
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
    ## @param primary.startupProbe.enabled Enable startupProbe
    ## @param primary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
    ## @param primary.startupProbe.periodSeconds Period seconds for startupProbe
    ## @param primary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
    ## @param primary.startupProbe.failureThreshold Failure threshold for startupProbe
    ## @param primary.startupProbe.successThreshold Success threshold for startupProbe
    ##
    startupProbe:
      enabled: false
      initialDelaySeconds: 120
      periodSeconds: 15
      timeoutSeconds: 5
      failureThreshold: 10
      successThreshold: 1
    ## Configure extra options for liveness probe
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param primary.livenessProbe.enabled Enable livenessProbe
    ## @param primary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param primary.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param primary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param primary.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param primary.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1
    ## @param primary.readinessProbe.enabled Enable readinessProbe
    ## @param primary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param primary.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param primary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param primary.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param primary.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1
    ## @param primary.customStartupProbe Override default startup probe for MariaDB primary containers
    ##
    customStartupProbe: {}
    ## @param primary.customLivenessProbe Override default liveness probe for MariaDB primary containers
    ##
    customLivenessProbe: {}
    ## @param primary.customReadinessProbe Override default readiness probe for MariaDB primary containers
    ##
    customReadinessProbe: {}
    ## @param primary.startupWaitOptions Override default builtin startup wait check options for MariaDB primary containers
    ## `bitnami/mariadb` Docker image has built-in startup check mechanism,
    ## which periodically checks if MariaDB service has started up and stops it
    ## if all checks have failed after X tries. Use these to control these checks.
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mariadb/pull/240
    ## Example (with default options):
    ## startupWaitOptions:
    ##   retries: 300
    ##   waitTime: 2
    ##
    startupWaitOptions: {}
    ## @param primary.extraFlags MariaDB primary additional command line flags
    ## Can be used to specify command line flags, for example:
    ## E.g.
    ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
    ##
    extraFlags: ""
    ## @param primary.extraEnvVars Extra environment variables to be set on MariaDB primary containers
    ## E.g.
    ## extraEnvVars:
    ##  - name: TZ
    ##    value: "Europe/Paris"
    ##
    extraEnvVars: []
    ## @param primary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for MariaDB primary containers
    ##
    extraEnvVarsCM: ""
    ## @param primary.extraEnvVarsSecret Name of existing Secret containing extra env vars for MariaDB primary containers
    ##
    extraEnvVarsSecret: ""
    ## Enable persistence using Persistent Volume Claims
    ## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
    ##
    persistence:
      ## @param primary.persistence.enabled Enable persistence on MariaDB primary replicas using a `PersistentVolumeClaim`. If false, use emptyDir
      ##
      enabled: true
      ## @param primary.persistence.existingClaim Name of an existing `PersistentVolumeClaim` for MariaDB primary replicas
      ## NOTE: When it's set the rest of persistence parameters are ignored
      ##
      existingClaim: ""
      ## @param primary.persistence.subPath Subdirectory of the volume to mount at
      ##
      subPath: ""
      ## @param primary.persistence.storageClass MariaDB primary persistent volume storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: ""
      ## @param primary.persistence.labels Labels for the PVC
      ##
      labels: {}
      ## @param primary.persistence.annotations MariaDB primary persistent volume claim annotations
      ##
      annotations: {}
      ## @param primary.persistence.accessModes MariaDB primary persistent volume access Modes
      ##
      accessModes:
        - ReadWriteOnce
      ## @param primary.persistence.size MariaDB primary persistent volume size
      ##
      size: 8Gi
      ## @param primary.persistence.selector Selector to match an existing Persistent Volume
      ## selector:
      ##   matchLabels:
      ##     app: my-app
      ##
      selector: {}
    ## @param primary.extraVolumes Optionally specify extra list of additional volumes to the MariaDB Primary pod(s)
    ##
    extraVolumes: []
    ## @param primary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MariaDB Primary container(s)
    ##
    extraVolumeMounts: []
    ## @param primary.initContainers Add additional init containers for the MariaDB Primary pod(s)
    ##
    initContainers: []
    ## @param primary.sidecars Add additional sidecar containers for the MariaDB Primary pod(s)
    ##
    sidecars: []
    ## MariaDB Primary Service parameters
    ##
    service:
      ## @param primary.service.type MariaDB Primary Kubernetes service type
      ##
      type: ClusterIP
      ports:
        ## @param primary.service.ports.mysql MariaDB Primary Kubernetes service port for MariaDB
        ##
        mysql: 3306
        ## @param primary.service.ports.metrics MariaDB Primary Kubernetes service port for metrics
        ##
        metrics: 9104
      ## @param primary.service.nodePorts.mysql MariaDB Primary Kubernetes service node port
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ##
      nodePorts:
        mysql: ""
      ## @param primary.service.clusterIP MariaDB Primary Kubernetes service clusterIP IP
      ##
      clusterIP: ""
      ## @param primary.service.loadBalancerIP MariaDB Primary loadBalancerIP if service type is `LoadBalancer`
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP: ""
      ## @param primary.service.externalTrafficPolicy Enable client source IP preservation
      ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: Cluster
      ## @param primary.service.loadBalancerSourceRanges Address that are allowed when MariaDB Primary service is LoadBalancer
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## E.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param primary.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
      ##
      extraPorts: []
      ## @param primary.service.annotations Provide any additional annotations which may be required
      ##
      annotations: {}
      ## @param primary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
      ## If "ClientIP", consecutive client requests will be directed to the same Pod
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      ##
      sessionAffinity: None
      ## @param primary.service.sessionAffinityConfig Additional settings for the sessionAffinity
      ## sessionAffinityConfig:
      ##   clientIP:
      ##     timeoutSeconds: 300
      ##
      sessionAffinityConfig: {}
      ## @param primary.service.headless.annotations Annotations of the headless service
      ##
      headless:
        annotations: {}
    ## MariaDB primary Pod Disruption Budget configuration
    ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    ##
    pdb:
      ## @param primary.pdb.create Enable/disable a Pod Disruption Budget creation for MariaDB primary pods
      ##
      create: true
      ## @param primary.pdb.minAvailable Minimum number/percentage of MariaDB primary pods that must still be available after the eviction
      ##
      minAvailable: ""
      ## @param primary.pdb.maxUnavailable Maximum number/percentage of MariaDB primary pods that can be unavailable after the eviction. Defaults to `1` if both `primary.pdb.minAvailable` and `primary.pdb.maxUnavailable` are empty.
      ##
      maxUnavailable: ""
    ## @param primary.revisionHistoryLimit Maximum number of revisions that will be maintained in the StatefulSet
    ##
    revisionHistoryLimit: 10
  ## @section MariaDB Secondary parameters
  ##

  ## Mariadb Secondary parameters
  ##
  secondary:
    ## @param secondary.name Name of the secondary database (eg secondary, slave, ...)
    ##
    name: secondary
    ## @param secondary.replicaCount Number of MariaDB secondary replicas
    ##
    replicaCount: 1
    ## @param secondary.command Override default container command on MariaDB Secondary container(s) (useful when using custom images)
    ##
    command: []
    ## @param secondary.args Override default container args on MariaDB Secondary container(s) (useful when using custom images)
    ##
    args: []
    ## @param secondary.lifecycleHooks for the MariaDB Secondary container(s) to automate configuration before or after startup
    ##
    lifecycleHooks: {}
    ## @param secondary.automountServiceAccountToken Mount Service Account token in pod
    ##
    automountServiceAccountToken: false
    ## @param secondary.hostAliases Add deployment host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    ##
    hostAliases: []
    ## @param secondary.containerPorts.mysql Container port for mysql
    ##
    containerPorts:
      mysql: 3306
    ## @param secondary.configuration [string] MariaDB Secondary configuration to be injected as ConfigMap
    ## ref: https://mysql.com/kb/en/mysql/configuring-mysql-with-mycnf/#example-of-configuration-file
    ##
    configuration: |-
      [mysqld]
      skip-name-resolve
      explicit_defaults_for_timestamp
      basedir=/opt/bitnami/mariadb
      datadir=/bitnami/mariadb/data
      port={{ .Values.secondary.containerPorts.mysql }}
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      tmpdir=/opt/bitnami/mariadb/tmp
      max_allowed_packet=16M
      bind-address=0.0.0.0
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
      log-error=/opt/bitnami/mariadb/logs/mysqld.log
      character-set-server=UTF8
      collation-server=utf8_general_ci
      slow_query_log=0
      long_query_time=10.0
      binlog_expire_logs_seconds=2592000
      {{- if .Values.tls.enabled }}
      ssl_cert=/opt/bitnami/mariadb/certs/{{ .Values.tls.certFilename }}
      ssl_key=/opt/bitnami/mariadb/certs/{{ .Values.tls.certKeyFilename }}
      {{- if (include "mariadb.tlsCACert" .) }}
      ssl_ca={{ include "mariadb.tlsCACert" . }}
      {{- end }}
      {{- end }}

      [client]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      default-character-set=UTF8

      [manager]
      port=3306
      socket=/opt/bitnami/mariadb/tmp/mysql.sock
      pid-file=/opt/bitnami/mariadb/tmp/mysqld.pid
    ## @param secondary.existingConfigmap Name of existing ConfigMap with MariaDB Secondary configuration.
    ## NOTE: When it's set the 'configuration' parameter is ignored
    ##
    existingConfigmap: ""
    ## @param secondary.updateStrategy.type MariaDB secondary statefulset strategy type
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    ##
    updateStrategy:
      ## StrategyType
      ## Can be set to RollingUpdate or OnDelete
      ##
      type: RollingUpdate
    ## @param secondary.rollingUpdatePartition Partition update strategy for Mariadb Secondary statefulset
    ## https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#partitions
    ##
    rollingUpdatePartition: ""
    ## @param secondary.podAnnotations Additional pod annotations for MariaDB secondary pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}
    ## @param secondary.podLabels Extra labels for MariaDB secondary pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    ##
    podLabels: {}
    ## @param secondary.podAffinityPreset MariaDB secondary pod affinity preset. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAffinityPreset: ""
    ## @param secondary.podAntiAffinityPreset MariaDB secondary pod anti-affinity preset. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
    ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAntiAffinityPreset: soft
    ## Mariadb Secondary node affinity preset
    ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
    ##
    nodeAffinityPreset:
      ## @param secondary.nodeAffinityPreset.type MariaDB secondary node affinity preset type. Ignored if `secondary.affinity` is set. Allowed values: `soft` or `hard`
      ##
      type: ""
      ## @param secondary.nodeAffinityPreset.key MariaDB secondary node label key to match Ignored if `secondary.affinity` is set.
      ## E.g.
      ## key: "kubernetes.io/e2e-az-name"
      ##
      key: ""
      ## @param secondary.nodeAffinityPreset.values MariaDB secondary node label values to match. Ignored if `secondary.affinity` is set.
      ## E.g.
      ## values:
      ##   - e2e-az1
      ##   - e2e-az2
      ##
      values: []
    ## @param secondary.affinity Affinity for MariaDB secondary pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## Note: podAffinityPreset, podAntiAffinityPreset, and  nodeAffinityPreset will be ignored when it's set
    ##
    affinity: {}
    ## @param secondary.nodeSelector Node labels for MariaDB secondary pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
    ##
    nodeSelector: {}
    ## @param secondary.tolerations Tolerations for MariaDB secondary pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []
    ## @param secondary.topologySpreadConstraints Topology Spread Constraints for MariaDB secondary pods assignment
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
    ## E.g.
    ## topologySpreadConstraints:
    ##   - maxSkew: 1
    ##     topologyKey: topology.kubernetes.io/zone
    ##     whenUnsatisfiable: DoNotSchedule
    ##
    topologySpreadConstraints: []
    ## @param secondary.priorityClassName Priority class for MariaDB secondary pods assignment
    ## Ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
    ##
    priorityClassName: ""
    ## @param secondary.runtimeClassName Runtime Class for MariaDB secondary pods
    ## Ref: https://kubernetes.io/docs/concepts/containers/runtime-class/
    ##
    runtimeClassName: ""
    ## @param secondary.schedulerName Name of the k8s scheduler (other than default)
    ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
    ##
    schedulerName: ""
    ## @param secondary.terminationGracePeriodSeconds In seconds, time the given to the MySQL secondary pod needs to terminate gracefully
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
    ##
    terminationGracePeriodSeconds: ""
    ## @param secondary.podManagementPolicy podManagementPolicy to manage scaling operation of MariaDB secondary pods
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
    ##
    podManagementPolicy: ""
    ## MariaDB secondary Pod security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param secondary.podSecurityContext.enabled Enable security context for MariaDB secondary pods
    ## @param secondary.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
    ## @param secondary.podSecurityContext.sysctls Set kernel settings using the sysctl interface
    ## @param secondary.podSecurityContext.supplementalGroups Set filesystem extra groups
    ## @param secondary.podSecurityContext.fsGroup Group ID for the mounted volumes' filesystem
    ##
    podSecurityContext:
      enabled: true
      fsGroupChangePolicy: Always
      sysctls: []
      supplementalGroups: []
      fsGroup: 1001
    ## MariaDB secondary container security context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param secondary.containerSecurityContext.enabled MariaDB secondary container securityContext
    ## @param secondary.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param secondary.containerSecurityContext.runAsUser User ID for the MariaDB secondary container
    ## @param secondary.containerSecurityContext.runAsGroup Group ID for the MariaDB secondary container
    ## @param secondary.containerSecurityContext.runAsNonRoot Set secondary container's Security Context runAsNonRoot
    ## @param secondary.containerSecurityContext.privileged Set secondary container's Security Context privileged
    ## @param secondary.containerSecurityContext.allowPrivilegeEscalation Set secondary container's Security Context allowPrivilegeEscalation
    ## @param secondary.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
    ## @param secondary.containerSecurityContext.capabilities.drop List of capabilities to be dropped
    ## @param secondary.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
    ##
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    ## MariaDB secondary container's resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## @param secondary.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if secondary.resources is set (secondary.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "small"
    ## @param secondary.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## Configure extra options for MariaDB Secondary containers' liveness, readiness and startup probes
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
    ## @param secondary.startupProbe.enabled Enable startupProbe
    ## @param secondary.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
    ## @param secondary.startupProbe.periodSeconds Period seconds for startupProbe
    ## @param secondary.startupProbe.timeoutSeconds Timeout seconds for startupProbe
    ## @param secondary.startupProbe.failureThreshold Failure threshold for startupProbe
    ## @param secondary.startupProbe.successThreshold Success threshold for startupProbe
    ##
    startupProbe:
      enabled: false
      initialDelaySeconds: 120
      periodSeconds: 15
      timeoutSeconds: 5
      failureThreshold: 10
      successThreshold: 1
    ## Configure extra options for liveness probe
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param secondary.livenessProbe.enabled Enable livenessProbe
    ## @param secondary.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param secondary.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param secondary.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param secondary.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param secondary.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1
    ## @param secondary.readinessProbe.enabled Enable readinessProbe
    ## @param secondary.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param secondary.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param secondary.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param secondary.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param secondary.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
      successThreshold: 1
    ## @param secondary.customStartupProbe Override default startup probe for MariaDB secondary containers
    ##
    customStartupProbe: {}
    ## @param secondary.customLivenessProbe Override default liveness probe for MariaDB secondary containers
    ##
    customLivenessProbe: {}
    ## @param secondary.customReadinessProbe Override default readiness probe for MariaDB secondary containers
    ##
    customReadinessProbe: {}
    ## @param secondary.startupWaitOptions Override default builtin startup wait check options for MariaDB secondary containers
    ## `bitnami/mariadb` Docker image has built-in startup check mechanism,
    ## which periodically checks if MariaDB service has started up and stops it
    ## if all checks have failed after X tries. Use these to control these checks.
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/mariadb/pull/240
    ## Example (with default options):
    ## startupWaitOptions:
    ##   retries: 300
    ##   waitTime: 2
    ##
    startupWaitOptions: {}
    ## @param secondary.extraFlags MariaDB secondary additional command line flags
    ## Can be used to specify command line flags, for example:
    ## E.g.
    ## extraFlags: "--max-connect-errors=1000 --max_connections=155"
    ##
    extraFlags: ""
    ## @param secondary.extraEnvVars Extra environment variables to be set on MariaDB secondary containers
    ## E.g.
    ## extraEnvVars:
    ##  - name: TZ
    ##    value: "Europe/Paris"
    ##
    extraEnvVars: []
    ## @param secondary.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for MariaDB secondary containers
    ##
    extraEnvVarsCM: ""
    ## @param secondary.extraEnvVarsSecret Name of existing Secret containing extra env vars for MariaDB secondary containers
    ##
    extraEnvVarsSecret: ""
    ## Enable persistence using Persistent Volume Claims
    ## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
    ##
    persistence:
      ## @param secondary.persistence.enabled Enable persistence on MariaDB secondary replicas using a `PersistentVolumeClaim`
      ##
      enabled: true
      ## @param secondary.persistence.subPath Subdirectory of the volume to mount at
      ##
      subPath: ""
      ## @param secondary.persistence.storageClass MariaDB secondary persistent volume storage Class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is
      ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
      ##   GKE, AWS & OpenStack)
      ##
      storageClass: ""
      ## @param secondary.persistence.labels Labels for the PVC
      ##
      labels: {}
      ## @param secondary.persistence.annotations MariaDB secondary persistent volume claim annotations
      ##
      annotations: {}
      ## @param secondary.persistence.accessModes MariaDB secondary persistent volume access Modes
      ##
      accessModes:
        - ReadWriteOnce
      ## @param secondary.persistence.size MariaDB secondary persistent volume size
      ##
      size: 8Gi
      ## @param secondary.persistence.selector Selector to match an existing Persistent Volume
      ## selector:
      ##   matchLabels:
      ##     app: my-app
      ##
      selector: {}
    ## @param secondary.extraVolumes Optionally specify extra list of additional volumes to the MariaDB secondary pod(s)
    ##
    extraVolumes: []
    ## @param secondary.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the MariaDB secondary container(s)
    ##
    extraVolumeMounts: []
    ## @param secondary.initContainers Add additional init containers for the MariaDB secondary pod(s)
    ##
    initContainers: []
    ## @param secondary.sidecars Add additional sidecar containers for the MariaDB secondary pod(s)
    ##
    sidecars: []
    ## MariaDB Secondary Service parameters
    ##
    service:
      ## @param secondary.service.type MariaDB secondary Kubernetes service type
      ##
      type: ClusterIP
      ports:
        ## @param secondary.service.ports.mysql MariaDB secondary Kubernetes service port for MariaDB
        ##
        mysql: 3306
        ## @param secondary.service.ports.metrics MariaDB secondary Kubernetes service port for metrics
        ##
        metrics: 9104
      ## @param secondary.service.nodePorts.mysql MariaDB secondary Kubernetes service node port
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ##
      nodePorts:
        mysql: ""
      ## @param secondary.service.clusterIP MariaDB secondary Kubernetes service clusterIP IP
      ## e.g:
      ## clusterIP: None
      ##
      clusterIP: ""
      ## @param secondary.service.loadBalancerIP MariaDB secondary loadBalancerIP if service type is `LoadBalancer`
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP: ""
      ## @param secondary.service.externalTrafficPolicy Enable client source IP preservation
      ## ref https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: Cluster
      ## @param secondary.service.loadBalancerSourceRanges Address that are allowed when MariaDB secondary service is LoadBalancer
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## E.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param secondary.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
      ##
      extraPorts: []
      ## @param secondary.service.annotations Provide any additional annotations which may be required
      ##
      annotations: {}
      ## @param secondary.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
      ## If "ClientIP", consecutive client requests will be directed to the same Pod
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      ##
      sessionAffinity: None
      ## @param secondary.service.sessionAffinityConfig Additional settings for the sessionAffinity
      ## sessionAffinityConfig:
      ##   clientIP:
      ##     timeoutSeconds: 300
      ##
      sessionAffinityConfig: {}
    ## MariaDB secondary Pod Disruption Budget configuration
    ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
    ##
    pdb:
      ## @param secondary.pdb.create Enable/disable a Pod Disruption Budget creation for MariaDB secondary pods
      ##
      create: true
      ## @param secondary.pdb.minAvailable Minimum number/percentage of MariaDB secondary pods that should remain scheduled
      ##
      minAvailable: ""
      ## @param secondary.pdb.maxUnavailable Maximum number/percentage of MariaDB secondary pods that may be made unavailable. Defaults to `1` if both `secondary.pdb.minAvailable` and `secondary.pdb.maxUnavailable` are empty.
      ##
      maxUnavailable: ""
    ## @param secondary.revisionHistoryLimit Maximum number of revisions that will be maintained in the StatefulSet
    ##
    revisionHistoryLimit: 10

  ## @section RBAC parameters
  ##

  ## MariaDB pods ServiceAccount
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  ##
  serviceAccount:
    ## @param serviceAccount.create Enable the creation of a ServiceAccount for MariaDB pods
    ##
    create: true
    ## @param serviceAccount.name Name of the created ServiceAccount
    ## If not set and create is true, a name is generated using the mariadb.fullname template
    ##
    name: ""
    ## @param serviceAccount.annotations Annotations for MariaDB Service Account
    ##
    annotations: {}
    ## @param serviceAccount.automountServiceAccountToken Automount service account token for the server service account
    ##
    automountServiceAccountToken: false
  ## Role Based Access
  ## ref: https://kubernetes.io/docs/admin/authorization/rbac/
  ##
  rbac:
    ## @param rbac.create Whether to create and use RBAC resources or not
    ##
    create: false

  ## @section Password update job
  ##
  passwordUpdateJob:
    ## @param passwordUpdateJob.enabled Enable password update job
    ##
    enabled: false
    ## @param passwordUpdateJob.backoffLimit set backoff limit of the job
    ##
    backoffLimit: 10
    ## @param passwordUpdateJob.command Override default container command on MariaDB Primary container(s) (useful when using custom images)
    ##
    command: []
    ## @param passwordUpdateJob.args Override default container args on MariaDB Primary container(s) (useful when using custom images)
    ##
    args: []
    ## @param passwordUpdateJob.extraCommands Extra commands to pass to the generation job
    ##
    extraCommands: ""
    ## @param passwordUpdateJob.previousPasswords.rootPassword Previous root password (set if the password secret was already changed)
    ## @param passwordUpdateJob.previousPasswords.password Previous password (set if the password secret was already changed)
    ## @param passwordUpdateJob.previousPasswords.replicationPassword Previous replication password (set if the password secret was already changed)
    ## @param passwordUpdateJob.previousPasswords.existingSecret Name of a secret containing the previous passwords (set if the password secret was already changed)
    previousPasswords:
      rootPassword: ""
      password: ""
      replicationPassword: ""
      existingSecret: ""
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param passwordUpdateJob.containerSecurityContext.enabled Enabled containers' Security Context
    ## @param passwordUpdateJob.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param passwordUpdateJob.containerSecurityContext.runAsUser Set containers' Security Context runAsUser
    ## @param passwordUpdateJob.containerSecurityContext.runAsGroup Set containers' Security Context runAsGroup
    ## @param passwordUpdateJob.containerSecurityContext.runAsNonRoot Set container's Security Context runAsNonRoot
    ## @param passwordUpdateJob.containerSecurityContext.privileged Set container's Security Context privileged
    ## @param passwordUpdateJob.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
    ## @param passwordUpdateJob.containerSecurityContext.allowPrivilegeEscalation Set container's Security Context allowPrivilegeEscalation
    ## @param passwordUpdateJob.containerSecurityContext.capabilities.drop List of capabilities to be dropped
    ## @param passwordUpdateJob.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
    ##
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      privileged: false
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    ## Configure Pods Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param passwordUpdateJob.podSecurityContext.enabled Enabled credential init job pods' Security Context
    ## @param passwordUpdateJob.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
    ## @param passwordUpdateJob.podSecurityContext.sysctls Set kernel settings using the sysctl interface
    ## @param passwordUpdateJob.podSecurityContext.supplementalGroups Set filesystem extra groups
    ## @param passwordUpdateJob.podSecurityContext.fsGroup Set credential init job pod's Security Context fsGroup
    ##
    podSecurityContext:
      enabled: true
      fsGroupChangePolicy: Always
      sysctls: []
      supplementalGroups: []
      fsGroup: 1001
    ## @param passwordUpdateJob.extraEnvVars Array containing extra env vars to configure the credential init job
    ## For example:
    ## extraEnvVars:
    ##  - name: GF_DEFAULT_INSTANCE_NAME
    ##    value: my-instance
    ##
    extraEnvVars: []
    ## @param passwordUpdateJob.extraEnvVarsCM ConfigMap containing extra env vars to configure the credential init job
    ##
    extraEnvVarsCM: ""
    ## @param passwordUpdateJob.extraEnvVarsSecret Secret containing extra env vars to configure the credential init job (in case of sensitive data)
    ##
    extraEnvVarsSecret: ""
    ## @param passwordUpdateJob.extraVolumes Optionally specify extra list of additional volumes for the credential init job
    ##
    extraVolumes: []
    ## @param passwordUpdateJob.extraVolumeMounts Array of extra volume mounts to be added to the jwt Container (evaluated as template). Normally used with `extraVolumes`.
    ##
    extraVolumeMounts: []
    ## @param passwordUpdateJob.initContainers Add additional init containers for the MariaDB Primary pod(s)
    ##
    initContainers: []
    ## Container resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param passwordUpdateJob.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if passwordUpdateJob.resources is set (passwordUpdateJob.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "micro"
    ## @param passwordUpdateJob.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## @param passwordUpdateJob.customLivenessProbe Custom livenessProbe that overrides the default one
    ##
    customLivenessProbe: {}
    ## @param passwordUpdateJob.customReadinessProbe Custom readinessProbe that overrides the default one
    ##
    customReadinessProbe: {}
    ## @param passwordUpdateJob.customStartupProbe Custom startupProbe that overrides the default one
    ##
    customStartupProbe: {}
    ## @param passwordUpdateJob.automountServiceAccountToken Mount Service Account token in pod
    ##
    automountServiceAccountToken: false
    ## @param passwordUpdateJob.hostAliases Add deployment host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    ##
    hostAliases: []
    ## @param passwordUpdateJob.annotations [object] Add annotations to the job
    ##
    annotations: {}
    ## @param passwordUpdateJob.podLabels Additional pod labels
    ## Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    ##
    podLabels: {}
    ## @param passwordUpdateJob.podAnnotations Additional pod annotations
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}

  ## @section Volume Permissions parameters
  ##

  ## Init containers parameters:
  ## volumePermissions: Change the owner and group of the persistent volume mountpoint to runAsUser:fsGroup values from the securityContext section.
  ##
  volumePermissions:
    ## @param volumePermissions.enabled Enable init container that changes the owner and group of the persistent volume(s) mountpoint to `runAsUser:fsGroup`
    ##
    enabled: false
    ## @param volumePermissions.image.registry [default: REGISTRY_NAME] Init container volume-permissions image registry
    ## @param volumePermissions.image.repository [default: REPOSITORY_NAME/os-shell] Init container volume-permissions image repository
    ## @skip volumePermissions.image.tag Init container volume-permissions image tag (immutable tags are recommended)
    ## @param volumePermissions.image.digest Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param volumePermissions.image.pullPolicy Init container volume-permissions image pull policy
    ## @param volumePermissions.image.pullSecrets Specify docker-registry secret names as an array
    ##
    image:
      registry: docker.io
      repository: bitnami/os-shell
      tag: 12-debian-12-r51
      digest: ""
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## Example:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## @param volumePermissions.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "nano"
    ## @param volumePermissions.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
  ## @section Metrics parameters
  ##

  ## Mysqld Prometheus exporter parameters
  ##
  metrics:
    ## @param metrics.enabled Start a side-car prometheus exporter
    ##
    enabled: false
    ## @param metrics.image.registry [default: REGISTRY_NAME] Exporter image registry
    ## @param metrics.image.repository [default: REPOSITORY_NAME/mysqld-exporter] Exporter image repository
    ## @skip metrics.image.tag Exporter image tag (immutable tags are recommended)
    ## @param metrics.image.digest Exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param metrics.image.pullPolicy Exporter image pull policy
    ## @param metrics.image.pullSecrets Specify docker-registry secret names as an array
    ##
    image:
      registry: docker.io
      repository: bitnami/mysqld-exporter
      tag: 0.17.2-debian-12-r16
      digest: ""
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets (secrets must be manually created in the namespace)
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## Example:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## @param metrics.annotations [object] Annotations for the Exporter pod
    ##
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9104"
    ## @param metrics.extraArgs [object] Extra args to be passed to mysqld_exporter
    ## ref: https://github.com/prometheus/mysqld_exporter/
    ## E.g.
    ## - --collect.auto_increment.columns
    ## - --collect.binlog_size
    ## - --collect.engine_innodb_status
    ## - --collect.engine_tokudb_status
    ## - --collect.global_status
    ## - --collect.global_variables
    ## - --collect.info_schema.clientstats
    ## - --collect.info_schema.innodb_metrics
    ## - --collect.info_schema.innodb_tablespaces
    ## - --collect.info_schema.innodb_cmp
    ## - --collect.info_schema.innodb_cmpmem
    ## - --collect.info_schema.processlist
    ## - --collect.info_schema.processlist.min_time
    ## - --collect.info_schema.query_response_time
    ## - --collect.info_schema.tables
    ## - --collect.info_schema.tables.databases
    ## - --collect.info_schema.tablestats
    ## - --collect.info_schema.userstats
    ## - --collect.perf_schema.eventsstatements
    ## - --collect.perf_schema.eventsstatements.digest_text_limit
    ## - --collect.perf_schema.eventsstatements.limit
    ## - --collect.perf_schema.eventsstatements.timelimit
    ## - --collect.perf_schema.eventswaits
    ## - --collect.perf_schema.file_events
    ## - --collect.perf_schema.file_instances
    ## - --collect.perf_schema.indexiowaits
    ## - --collect.perf_schema.tableiowaits
    ## - --collect.perf_schema.tablelocks
    ## - --collect.perf_schema.replication_group_member_stats
    ## - --collect.slave_status
    ## - --collect.slave_hosts
    ## - --collect.heartbeat
    ## - --collect.heartbeat.database
    ## - --collect.heartbeat.table
    ##
    extraArgs:
      primary: []
      secondary: []
    ## @param metrics.extraVolumeMounts [object] Optionally specify extra list of additional volumeMounts for the MariaDB metrics container(s)
    ##
    extraVolumeMounts:
      primary: []
      secondary: []
    ## @param metrics.containerPorts.http Container port for http
    ##
    containerPorts:
      http: 9104
    ## MariaDB metrics container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param metrics.containerSecurityContext.enabled Enable security context for MariaDB metrics container
    ## @param metrics.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param metrics.containerSecurityContext.runAsUser User ID for the MariaDB metrics container
    ## @param metrics.containerSecurityContext.runAsGroup Group ID for the MariaDB metrics container
    ## @param metrics.containerSecurityContext.runAsNonRoot Set metrics container's Security Context runAsNonRoot
    ## @param metrics.containerSecurityContext.privileged Set metrics container's Security Context privileged
    ## @param metrics.containerSecurityContext.allowPrivilegeEscalation Set metrics container's Security Context allowPrivilegeEscalation
    ## @param metrics.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context readOnlyRootFilesystem
    ## @param metrics.containerSecurityContext.capabilities.drop List of capabilities to be dropped
    ## @param metrics.containerSecurityContext.seccompProfile.type Set container's Security Context seccomp profile
    ## Example:
    ##   containerSecurityContext:
    ##     enabled: true
    ##     capabilities:
    ##       drop: ["NET_RAW"]
    ##     readOnlyRootFilesystem: true
    ##
    containerSecurityContext:
      enabled: false
      privileged: false
      runAsNonRoot: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: "RuntimeDefault"
    ## Mysqld Prometheus exporter resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## We usually recommend not to specify default resources and to leave this as a conscious
    ## choice for the user. This also increases chances charts run on environments with little
    ## resources, such as Minikube. If you do want to specify resources, uncomment the following
    ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    ## @param metrics.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if metrics.resources is set (metrics.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "nano"
    ## @param metrics.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## Configure extra options for liveness probe
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param metrics.livenessProbe.enabled Enable livenessProbe
    ## @param metrics.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param metrics.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param metrics.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param metrics.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param metrics.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 120
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 3
    ## Configure extra options for readiness probe
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param metrics.readinessProbe.enabled Enable readinessProbe
    ## @param metrics.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param metrics.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param metrics.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param metrics.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param metrics.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 3
    ## Prometheus Service Monitor
    ## ref: https://github.com/coreos/prometheus-operator
    ##
    serviceMonitor:
      ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
      ##
      enabled: false
      ## @param metrics.serviceMonitor.namespace Namespace which Prometheus is running in
      ##
      namespace: ""
      ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
      ##
      jobLabel: ""
      ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
      ##
      interval: 30s
      ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
      ## e.g:
      ## scrapeTimeout: 30s
      ##
      scrapeTimeout: ""
      ## @param metrics.serviceMonitor.relabelings RelabelConfigs to apply to samples before scraping
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
      ##
      relabelings: []
      ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
      ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#relabelconfig
      ##
      metricRelabelings: []
      ## @param metrics.serviceMonitor.honorLabels honorLabels chooses the metric's labels on collisions with target labels
      ##
      honorLabels: false
      ## @param metrics.serviceMonitor.selector ServiceMonitor selector labels
      ## ref: https://github.com/bitnami/charts/tree/main/bitnami/prometheus-operator#prometheus-configuration
      ##
      ## selector:
      ##   prometheus: my-prometheus
      ##
      selector: {}
      ## @param metrics.serviceMonitor.labels Extra labels for the ServiceMonitor
      ##
      labels: {}
    ## Prometheus Operator PrometheusRule configuration
    ##
    prometheusRule:
      ## @param metrics.prometheusRule.enabled if `true`, creates a Prometheus Operator PrometheusRule (also requires `metrics.enabled` to be `true` and `metrics.prometheusRule.rules`)
      ##
      enabled: false
      ## @param metrics.prometheusRule.namespace Namespace for the PrometheusRule Resource (defaults to the Release Namespace)
      ##
      namespace: ""
      ## @param metrics.prometheusRule.additionalLabels Additional labels that can be used so PrometheusRule will be discovered by Prometheus
      ##
      additionalLabels: {}
      ## @param metrics.prometheusRule.rules Prometheus Rule definitions
      ##  - alert: MariaDB-Down
      ##    expr: absent(up{job="mariadb"} == 1)
      ##    for: 5m
      ##    labels:
      ##      severity: warning
      ##      service: mariadb
      ##    annotations:
      ##      message: 'MariaDB instance {{ `{{` }} $labels.instance {{ `}}` }} is down'
      ##      summary: MariaDB instance is down
      ##
      rules: []
  ## @section NetworkPolicy parameters
  ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    ## @param networkPolicy.enabled Enable creation of NetworkPolicy resources
    ##
    enabled: true
    ## @param networkPolicy.allowExternal The Policy model to apply
    ## When set to false, only pods with the correct client label will have network access to the ports MariaDB is
    ## listening on. When true, MariaDB will accept connections from any source (with the correct destination port).
    ##
    allowExternal: true
    ## @param networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
    ##
    allowExternalEgress: true
    ## @param networkPolicy.extraIngress [array] Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraIngress:
    ##   - ports:
    ##       - port: 1234
    ##     from:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    ##
    extraIngress: []
    ## @param networkPolicy.extraEgress [array] Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraEgress:
    ##   - ports:
    ##       - port: 1234
    ##     to:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    ##
    extraEgress: []
    ## @param networkPolicy.ingressNSMatchLabels [object] Labels to match to allow traffic from other namespaces
    ## @param networkPolicy.ingressNSPodMatchLabels [object] Pod labels to match to allow traffic from other namespaces
    ##
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}

nextcloud-cache:
  # Copyright Broadcom, Inc. All Rights Reserved.
  # SPDX-License-Identifier: APACHE-2.0

  ## @section Global parameters
  ## Global Docker image parameters
  ## Please, note that this will override the image parameters, including dependencies, configured to use the global value
  ## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
  ##

  ## @param global.imageRegistry Global Docker image registry
  ## @param global.imagePullSecrets Global Docker registry secret names as an array
  ## @param global.defaultStorageClass Global default StorageClass for Persistent Volume(s)
  ## @param global.storageClass DEPRECATED: use global.defaultStorageClass instead
  ## @param global.redis.password Global Redis(R) password (overrides `auth.password`)
  ##
  global:
    imageRegistry: ""
    ## E.g.
    ## imagePullSecrets:
    ##   - myRegistryKeySecretName
    ##
    imagePullSecrets: []
    defaultStorageClass: ""
    storageClass: ""
    ## Security parameters
    ##
    security:
      ## @param global.security.allowInsecureImages Allows skipping image verification
      allowInsecureImages: false
    redis:
      password: ""
    ## Compatibility adaptations for Kubernetes platforms
    ##
    compatibility:
      ## Compatibility adaptations for Openshift
      ##
      openshift:
        ## @param global.compatibility.openshift.adaptSecurityContext Adapt the securityContext sections of the deployment to make them compatible with Openshift restricted-v2 SCC: remove runAsUser, runAsGroup and fsGroup and let the platform use their allowed default IDs. Possible values: auto (apply if the detected running cluster is Openshift), force (perform the adaptation always), disabled (do not perform adaptation)
        ##
        adaptSecurityContext: auto
  ## @section Common parameters
  ##

  ## @param kubeVersion Override Kubernetes version
  ##
  kubeVersion: ""
  ## @param nameOverride String to partially override common.names.fullname
  ##
  nameOverride: ""
  ## @param fullnameOverride String to fully override common.names.fullname
  ##
  fullnameOverride: ""
  ## @param namespaceOverride String to fully override common.names.namespace
  ##
  namespaceOverride: ""
  ## @param commonLabels Labels to add to all deployed objects
  ##
  commonLabels: {}
  ## @param commonAnnotations Annotations to add to all deployed objects
  ##
  commonAnnotations: {}
  ## @param configmapChecksumAnnotations Enable checksum annotations used to trigger rolling updates when ConfigMap(s) change
  ##
  configmapChecksumAnnotations: true
  ## @param secretChecksumAnnotations Enable checksum annotations used to trigger rolling updates when Secret(s) change
  ##
  secretChecksumAnnotations: true
  ## @param secretAnnotations Annotations to add to secret
  ##
  secretAnnotations: {}
  ## @param clusterDomain Kubernetes cluster domain name
  ##
  clusterDomain: cluster.local
  ## @param extraDeploy Array of extra objects to deploy with the release
  ##
  extraDeploy: []
  ## @param useHostnames Use hostnames internally when announcing replication. If false, the hostname will be resolved to an IP address
  ##
  useHostnames: true
  ## @param nameResolutionThreshold Failure threshold for internal hostnames resolution
  ##
  nameResolutionThreshold: 5
  ## @param nameResolutionTimeout Timeout seconds between probes for internal hostnames resolution
  ##
  nameResolutionTimeout: 5
  ## Enable diagnostic mode in the deployment
  ##
  diagnosticMode:
    ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
    ##
    enabled: false
    ## @param diagnosticMode.command Command to override all containers in the deployment
    ##
    command:
      - sleep
    ## @param diagnosticMode.args Args to override all containers in the deployment
    ##
    args:
      - infinity

  ## @section Redis(R) Image parameters
  ##

  ## Bitnami Redis(R) image
  ## ref: https://hub.docker.com/r/bitnami/redis/tags/
  ## @param image.registry [default: REGISTRY_NAME] Redis(R) image registry
  ## @param image.repository [default: REPOSITORY_NAME/redis] Redis(R) image repository
  ## @skip image.tag Redis(R) image tag (immutable tags are recommended)
  ## @param image.digest Redis(R) image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param image.pullPolicy Redis(R) image pull policy
  ## @param image.pullSecrets Redis(R) image pull secrets
  ## @param image.debug Enable image debug mode
  ##
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: 8.2.1-debian-12-r0
    digest: ""
    ## Specify a imagePullPolicy
    ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
    ## Enable debug mode
    ##
    debug: false
  ## @section Redis(R) common configuration parameters
  ## https://github.com/bitnami/containers/tree/main/bitnami/redis#configuration
  ##

  ## @param architecture Redis(R) architecture. Allowed values: `standalone` or `replication`
  ##
  architecture: replication
  ## Redis(R) Authentication parameters
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/redis#setting-the-server-password-on-first-run
  ##
  auth:
    ## @param auth.enabled Enable password authentication
    ##
    enabled: true
    ## @param auth.sentinel Enable authentication on sentinels too
    ##
    sentinel: true
    ## @param auth.password Redis(R) password
    ## Defaults to a random 10-character alphanumeric string if not set
    ##
    password: ""
    ## @param auth.existingSecret The name of an existing secret with Redis(R) credentials
    ## NOTE: When it's set, the previous `auth.password` parameter is ignored
    ##
    existingSecret: ""
    ## @param auth.existingSecretPasswordKey Password key to be retrieved from existing secret
    ## NOTE: ignored unless `auth.existingSecret` parameter is set
    ##
    existingSecretPasswordKey: ""
    ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
    ##
    usePasswordFiles: true
    ## @param auth.usePasswordFileFromSecret Mount password file from secret
    ##
    usePasswordFileFromSecret: true
    ## Redis ACL restricts connections by limiting commands and key access with auth management.
    ## ref: https://redis.io/docs/latest/operate/oss_and_stack/management/security/acl/
    ##
    acl:
      ## @param auth.acl.enabled Enables the support of the Redis ACL system
      ##
      enabled: false
      ## @param auth.acl.sentinel Enables the support of the Redis ACL system for Sentinel Nodes
      ##
      sentinel: false
      ## @param auth.acl.users A list of the configured users in the Redis ACL system
      ##
      ## Example:
      ## users:
      ##   - username: "my-user"
      ##     password: "mypassword"
      ##     enabled: "on"
      ##     commands: "+@all"
      ##     keys: "~*"
      ##     channels: "&*"
      users: []
      ## @param auth.acl.userSecret Name of the Secret, containing user credentials for ACL users. Keys must match usernames.
      userSecret: ""
  ## @param commonConfiguration [string] Common configuration to be added into the ConfigMap
  ## ref: https://redis.io/topics/config
  ##
  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
  ## @param existingConfigmap The name of an existing ConfigMap with your custom configuration for Redis(R) nodes
  ##
  existingConfigmap: ""
  ## @section Redis(R) master configuration parameters
  ##
  master:
    ## @param master.count Number of Redis(R) master instances to deploy (experimental, requires additional configuration)
    ##
    count: 1
    ## @param master.revisionHistoryLimit The number of old history to retain to allow rollback
    ## NOTE: Explicitly setting this field to 0, will result in cleaning up all the history, breaking ability to rollback
    revisionHistoryLimit: 10
    ## @param master.configuration Configuration for Redis(R) master nodes
    ## ref: https://redis.io/topics/config
    ##
    configuration: ""
    ## @param master.disableCommands Array with Redis(R) commands to disable on master nodes
    ## Commands will be completely disabled by renaming each to an empty string.
    ## ref: https://redis.io/topics/security#disabling-of-specific-commands
    ##
    disableCommands:
      - FLUSHDB
      - FLUSHALL
    ## @param master.command Override default container command (useful when using custom images)
    ##
    command: []
    ## @param master.args Override default container args (useful when using custom images)
    ##
    args: []
    ## @param master.enableServiceLinks Whether information about services should be injected into pod's environment variable
    ##
    enableServiceLinks: true
    ## @param master.preExecCmds Additional commands to run prior to starting Redis(R) master
    ##
    preExecCmds: []
    ## @param master.extraFlags Array with additional command line flags for Redis(R) master
    ## e.g:
    ## extraFlags:
    ##  - "--maxmemory-policy volatile-ttl"
    ##  - "--repl-backlog-size 1024mb"
    ##
    extraFlags: []
    ## @param master.extraEnvVars Array with extra environment variables to add to Redis(R) master nodes
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []
    ## @param master.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Redis(R) master nodes
    ##
    extraEnvVarsCM: ""
    ## @param master.extraEnvVarsSecret Name of existing Secret containing extra env vars for Redis(R) master nodes
    ##
    extraEnvVarsSecret: ""
    ## @param master.containerPorts.redis Container port to open on Redis(R) master nodes
    ##
    containerPorts:
      redis: 6379
    ## Configure extra options for Redis(R) containers' liveness and readiness probes
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param master.startupProbe.enabled Enable startupProbe on Redis(R) master nodes
    ## @param master.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
    ## @param master.startupProbe.periodSeconds Period seconds for startupProbe
    ## @param master.startupProbe.timeoutSeconds Timeout seconds for startupProbe
    ## @param master.startupProbe.failureThreshold Failure threshold for startupProbe
    ## @param master.startupProbe.successThreshold Success threshold for startupProbe
    ##
    startupProbe:
      enabled: false
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    ## @param master.livenessProbe.enabled Enable livenessProbe on Redis(R) master nodes
    ## @param master.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param master.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param master.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param master.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param master.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    ## @param master.readinessProbe.enabled Enable readinessProbe on Redis(R) master nodes
    ## @param master.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param master.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param master.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param master.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param master.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 5
    ## @param master.customStartupProbe Custom startupProbe that overrides the default one
    ##
    customStartupProbe: {}
    ## @param master.customLivenessProbe Custom livenessProbe that overrides the default one
    ##
    customLivenessProbe: {}
    ## @param master.customReadinessProbe Custom readinessProbe that overrides the default one
    ##
    customReadinessProbe: {}
    ## Redis(R) master resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param master.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if master.resources is set (master.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "nano"
    ## @param master.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## Configure Pods Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param master.podSecurityContext.enabled Enabled Redis(R) master pods' Security Context
    ## @param master.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
    ## @param master.podSecurityContext.sysctls Set kernel settings using the sysctl interface
    ## @param master.podSecurityContext.supplementalGroups Set filesystem extra groups
    ## @param master.podSecurityContext.fsGroup Set Redis(R) master pod's Security Context fsGroup
    ##
    podSecurityContext:
      enabled: true
      fsGroupChangePolicy: Always
      sysctls: []
      supplementalGroups: []
      fsGroup: 1001
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param master.containerSecurityContext.enabled Enabled Redis(R) master containers' Security Context
    ## @param master.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param master.containerSecurityContext.runAsUser Set Redis(R) master containers' Security Context runAsUser
    ## @param master.containerSecurityContext.runAsGroup Set Redis(R) master containers' Security Context runAsGroup
    ## @param master.containerSecurityContext.runAsNonRoot Set Redis(R) master containers' Security Context runAsNonRoot
    ## @param master.containerSecurityContext.allowPrivilegeEscalation Is it possible to escalate Redis(R) pod(s) privileges
    ## @param master.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context read-only root filesystem
    ## @param master.containerSecurityContext.seccompProfile.type Set Redis(R) master containers' Security Context seccompProfile
    ## @param master.containerSecurityContext.capabilities.drop Set Redis(R) master containers' Security Context capabilities to drop
    ##
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop: ["ALL"]
    ## @param master.kind Use either Deployment, StatefulSet (default) or DaemonSet
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/
    ##
    kind: StatefulSet
    ## @param master.schedulerName Alternate scheduler for Redis(R) master pods
    ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
    ##
    schedulerName: ""
    ## @param master.updateStrategy.type Redis(R) master statefulset strategy type
    ## @skip master.updateStrategy.rollingUpdate
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    ##
    updateStrategy:
      ## StrategyType
      ## Can be set to RollingUpdate, OnDelete (statefulset), Recreate (deployment)
      ##
      type: RollingUpdate
    ## @param master.minReadySeconds How many seconds a pod needs to be ready before killing the next, during update
    ##
    minReadySeconds: 0
    ## @param master.priorityClassName Redis(R) master pods' priorityClassName
    ##
    priorityClassName: ""
    ## @param master.automountServiceAccountToken Mount Service Account token in pod
    ##
    automountServiceAccountToken: false
    ## @param master.hostAliases Redis(R) master pods host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    ##
    hostAliases: []
    ## @param master.podLabels Extra labels for Redis(R) master pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    ##
    podLabels: {}
    ## @param master.podAnnotations Annotations for Redis(R) master pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}
    ## @param master.shareProcessNamespace Share a single process namespace between all of the containers in Redis(R) master pods
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/
    ##
    shareProcessNamespace: false
    ## @param master.podAffinityPreset Pod affinity preset. Ignored if `master.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAffinityPreset: ""
    ## @param master.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `master.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAntiAffinityPreset: soft
    ## Node master.affinity preset
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
    ##
    nodeAffinityPreset:
      ## @param master.nodeAffinityPreset.type Node affinity preset type. Ignored if `master.affinity` is set. Allowed values: `soft` or `hard`
      ##
      type: ""
      ## @param master.nodeAffinityPreset.key Node label key to match. Ignored if `master.affinity` is set
      ##
      key: ""
      ## @param master.nodeAffinityPreset.values Node label values to match. Ignored if `master.affinity` is set
      ## E.g.
      ## values:
      ##   - e2e-az1
      ##   - e2e-az2
      ##
      values: []
    ## @param master.affinity Affinity for Redis(R) master pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## NOTE: `master.podAffinityPreset`, `master.podAntiAffinityPreset`, and `master.nodeAffinityPreset` will be ignored when it's set
    ##
    affinity: {}
    ## @param master.nodeSelector Node labels for Redis(R) master pods assignment
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
    ##
    nodeSelector: {}
    ## @param master.tolerations Tolerations for Redis(R) master pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []
    ## @param master.topologySpreadConstraints Spread Constraints for Redis(R) master pod assignment
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
    ## E.g.
    ## topologySpreadConstraints:
    ##   - maxSkew: 1
    ##     topologyKey: node
    ##     whenUnsatisfiable: DoNotSchedule
    ##
    topologySpreadConstraints: []
    ## @param master.dnsPolicy DNS Policy for Redis(R) master pod
    ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
    ## E.g.
    ## dnsPolicy: ClusterFirst
    ##
    dnsPolicy: ""
    ## @param master.dnsConfig DNS Configuration for Redis(R) master pod
    ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
    ## E.g.
    ## dnsConfig:
    ##   options:
    ##   - name: ndots
    ##     value: "4"
    ##   - name: single-request-reopen
    ##
    dnsConfig: {}
    ## @param master.lifecycleHooks for the Redis(R) master container(s) to automate configuration before or after startup
    ##
    lifecycleHooks: {}
    ## @param master.extraVolumes Optionally specify extra list of additional volumes for the Redis(R) master pod(s)
    ##
    extraVolumes: []
    ## @param master.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Redis(R) master container(s)
    ##
    extraVolumeMounts: []
    ## @param master.sidecars Add additional sidecar containers to the Redis(R) master pod(s)
    ## e.g:
    ## sidecars:
    ##   - name: your-image-name
    ##     image: your-image
    ##     imagePullPolicy: Always
    ##     ports:
    ##       - name: portname
    ##         containerPort: 1234
    ##
    sidecars: []
    ## @param master.initContainers Add additional init containers to the Redis(R) master pod(s)
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
    ## e.g:
    ## initContainers:
    ##  - name: your-image-name
    ##    image: your-image
    ##    imagePullPolicy: Always
    ##    command: ['/bin/bash', '-ec', 'echo "hello world"']
    ##
    initContainers: []
    ## Persistence parameters
    ## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
    ##
    persistence:
      ## @param master.persistence.enabled Enable persistence on Redis(R) master nodes using Persistent Volume Claims
      ##
      enabled: true
      ## @param master.persistence.medium Provide a medium for `emptyDir` volumes.
      ##
      medium: ""
      ## @param master.persistence.sizeLimit Set this to enable a size limit for `emptyDir` volumes.
      ##
      sizeLimit: ""
      ## @param master.persistence.path The path the volume will be mounted at on Redis(R) master containers
      ## NOTE: Useful when using different Redis(R) images
      ##
      path: /data
      ## @param master.persistence.subPath The subdirectory of the volume to mount on Redis(R) master containers
      ## NOTE: Useful in dev environments
      ##
      subPath: ""
      ## @param master.persistence.subPathExpr Used to construct the subPath subdirectory of the volume to mount on Redis(R) master containers
      ##
      subPathExpr: ""
      ## @param master.persistence.storageClass Persistent Volume storage class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner
      ##
      storageClass: ""
      ## @param master.persistence.accessModes Persistent Volume access modes
      ##
      accessModes:
        - ReadWriteOnce
      ## @param master.persistence.size Persistent Volume size
      ##
      size: 8Gi
      ## @param master.persistence.annotations Additional custom annotations for the PVC
      ##
      annotations: {}
      ## @param master.persistence.labels Additional custom labels for the PVC
      ##
      labels: {}
      ## @param master.persistence.selector Additional labels to match for the PVC
      ## e.g:
      ## selector:
      ##   matchLabels:
      ##     app: my-app
      ##
      selector: {}
      ## @param master.persistence.dataSource Custom PVC data source
      ##
      dataSource: {}
      ## @param master.persistence.existingClaim Use a existing PVC which must be created manually before bound
      ## NOTE: requires master.persistence.enabled: true
      ##
      existingClaim: ""
    ## persistentVolumeClaimRetentionPolicy
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
    ## @param master.persistentVolumeClaimRetentionPolicy.enabled Controls if and how PVCs are deleted during the lifecycle of a StatefulSet
    ## @param master.persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
    ## @param master.persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
    ##
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenScaled: Retain
      whenDeleted: Retain
    ## Redis(R) master service parameters
    ##
    service:
      ## @param master.service.type Redis(R) master service type
      ##
      type: ClusterIP
      ## @param master.service.portNames.redis Redis(R) master service port name
      ##
      portNames:
        redis: "tcp-redis"
      ## @param master.service.ports.redis Redis(R) master service port
      ##
      ports:
        redis: 6379
      ## @param master.service.nodePorts.redis Node port for Redis(R) master
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ## NOTE: choose port between <30000-32767>
      ##
      nodePorts:
        redis: ""
      ## @param master.service.externalTrafficPolicy Redis(R) master service external traffic policy
      ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: Cluster
      ## @param master.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
      ##
      extraPorts: []
      ## @param master.service.internalTrafficPolicy Redis(R) master service internal traffic policy (requires Kubernetes v1.22 or greater to be usable)
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service-traffic-policy/
      ##
      internalTrafficPolicy: Cluster
      ## @param master.service.clusterIP Redis(R) master service Cluster IP
      ##
      clusterIP: ""
      ## @param master.service.loadBalancerIP Redis(R) master service Load Balancer IP
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP: ""
      ## @param master.service.loadBalancerClass master service Load Balancer class if service type is `LoadBalancer` (optional, cloud specific)
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
      ##
      loadBalancerClass: ""
      ## @param master.service.loadBalancerSourceRanges Redis(R) master service Load Balancer sources
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## e.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param master.service.externalIPs Redis(R) master service External IPs
      ## https://kubernetes.io/docs/concepts/services-networking/service/#external-ips
      ## e.g.
      ## externalIPs:
      ##   - 10.10.10.1
      ##   - 201.22.30.1
      ##
      externalIPs: []
      ## @param master.service.annotations Additional custom annotations for Redis(R) master service
      ##
      annotations: {}
      ## @param master.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
      ## If "ClientIP", consecutive client requests will be directed to the same Pod
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      ##
      sessionAffinity: None
      ## @param master.service.sessionAffinityConfig Additional settings for the sessionAffinity
      ## sessionAffinityConfig:
      ##   clientIP:
      ##     timeoutSeconds: 300
      ##
      sessionAffinityConfig: {}
    ## @param master.terminationGracePeriodSeconds Integer setting the termination grace period for the redis-master pods
    ##
    terminationGracePeriodSeconds: 30
    ## ServiceAccount configuration
    ##
    serviceAccount:
      ## @param master.serviceAccount.create Specifies whether a ServiceAccount should be created
      ##
      create: true
      ## @param master.serviceAccount.name The name of the ServiceAccount to use.
      ## If not set and create is true, a name is generated using the common.names.fullname template
      ##
      name: ""
      ## @param master.serviceAccount.automountServiceAccountToken Whether to auto mount the service account token
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server
      ##
      automountServiceAccountToken: false
      ## @param master.serviceAccount.annotations Additional custom annotations for the ServiceAccount
      ##
      annotations: {}
    ## Pod Disruption Budget configuration
    ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
    ## @param master.pdb.create Enable/disable a Pod Disruption Budget creation
    ## @param master.pdb.minAvailable [object] Minimum number/percentage of pods that should remain scheduled
    ## @param master.pdb.maxUnavailable [object] Maximum number/percentage of pods that may be made unavailable. Defaults to `1` if both `master.pdb.minAvailable` and `master.pdb.maxUnavailable` are empty.
    ##
    pdb:
      create: true
      minAvailable: ""
      maxUnavailable: ""
    ## @param master.extraPodSpec Optionally specify extra PodSpec for the Redis(R) master pod(s)
    ##
    extraPodSpec: {}
    ## @param master.annotations Additional custom annotations for Redis(R) Master resource
    ##
    annotations: {}
  ## @section Redis(R) replicas configuration parameters
  ##
  replica:
    ## @param replica.kind Use either DaemonSet or StatefulSet (default)
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/
    ##
    kind: StatefulSet
    ## @param replica.replicaCount Number of Redis(R) replicas to deploy
    ##
    replicaCount: 3
    ## @param replica.revisionHistoryLimit The number of old history to retain to allow rollback
    ## NOTE: Explicitly setting this field to 0, will result in cleaning up all the history, breaking ability to rollback
    revisionHistoryLimit: 10
    ## @param replica.configuration Configuration for Redis(R) replicas nodes
    ## ref: https://redis.io/topics/config
    ##
    configuration: ""
    ## @param replica.disableCommands Array with Redis(R) commands to disable on replicas nodes
    ## Commands will be completely disabled by renaming each to an empty string.
    ## ref: https://redis.io/topics/security#disabling-of-specific-commands
    ##
    disableCommands:
      - FLUSHDB
      - FLUSHALL
    ## @param replica.command Override default container command (useful when using custom images)
    ##
    command: []
    ## @param replica.args Override default container args (useful when using custom images)
    ##
    args: []
    ## @param replica.enableServiceLinks Whether information about services should be injected into pod's environment variable
    ##
    enableServiceLinks: true
    ## @param replica.preExecCmds Additional commands to run prior to starting Redis(R) replicas
    ##
    preExecCmds: []
    ## @param replica.extraFlags Array with additional command line flags for Redis(R) replicas
    ## e.g:
    ## extraFlags:
    ##  - "--maxmemory-policy volatile-ttl"
    ##  - "--repl-backlog-size 1024mb"
    ##
    extraFlags: []
    ## @param replica.extraEnvVars Array with extra environment variables to add to Redis(R) replicas nodes
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []
    ## @param replica.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Redis(R) replicas nodes
    ##
    extraEnvVarsCM: ""
    ## @param replica.extraEnvVarsSecret Name of existing Secret containing extra env vars for Redis(R) replicas nodes
    ##
    extraEnvVarsSecret: ""
    ## @param replica.externalMaster.enabled Use external master for bootstrapping
    ## @param replica.externalMaster.host External master host to bootstrap from
    ## @param replica.externalMaster.port Port for Redis service external master host
    ##
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    ## @param replica.containerPorts.redis Container port to open on Redis(R) replicas nodes
    ##
    containerPorts:
      redis: 6379
    ## Configure extra options for Redis(R) containers' liveness and readiness probes
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param replica.startupProbe.enabled Enable startupProbe on Redis(R) replicas nodes
    ## @param replica.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
    ## @param replica.startupProbe.periodSeconds Period seconds for startupProbe
    ## @param replica.startupProbe.timeoutSeconds Timeout seconds for startupProbe
    ## @param replica.startupProbe.failureThreshold Failure threshold for startupProbe
    ## @param replica.startupProbe.successThreshold Success threshold for startupProbe
    ##
    startupProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 22
    ## @param replica.livenessProbe.enabled Enable livenessProbe on Redis(R) replicas nodes
    ## @param replica.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param replica.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param replica.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param replica.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param replica.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    ## @param replica.readinessProbe.enabled Enable readinessProbe on Redis(R) replicas nodes
    ## @param replica.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param replica.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param replica.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param replica.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param replica.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 5
    ## @param replica.customStartupProbe Custom startupProbe that overrides the default one
    ##
    customStartupProbe: {}
    ## @param replica.customLivenessProbe Custom livenessProbe that overrides the default one
    ##
    customLivenessProbe: {}
    ## @param replica.customReadinessProbe Custom readinessProbe that overrides the default one
    ##
    customReadinessProbe: {}
    ## Redis(R) replicas resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param replica.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if replica.resources is set (replica.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "nano"
    ## @param replica.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## Configure Pods Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param replica.podSecurityContext.enabled Enabled Redis(R) replicas pods' Security Context
    ## @param replica.podSecurityContext.fsGroupChangePolicy Set filesystem group change policy
    ## @param replica.podSecurityContext.sysctls Set kernel settings using the sysctl interface
    ## @param replica.podSecurityContext.supplementalGroups Set filesystem extra groups
    ## @param replica.podSecurityContext.fsGroup Set Redis(R) replicas pod's Security Context fsGroup
    ##
    podSecurityContext:
      enabled: true
      fsGroupChangePolicy: Always
      sysctls: []
      supplementalGroups: []
      fsGroup: 1001
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param replica.containerSecurityContext.enabled Enabled Redis(R) replicas containers' Security Context
    ## @param replica.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param replica.containerSecurityContext.runAsUser Set Redis(R) replicas containers' Security Context runAsUser
    ## @param replica.containerSecurityContext.runAsGroup Set Redis(R) replicas containers' Security Context runAsGroup
    ## @param replica.containerSecurityContext.runAsNonRoot Set Redis(R) replicas containers' Security Context runAsNonRoot
    ## @param replica.containerSecurityContext.allowPrivilegeEscalation Set Redis(R) replicas pod's Security Context allowPrivilegeEscalation
    ## @param replica.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context read-only root filesystem
    ## @param replica.containerSecurityContext.seccompProfile.type Set Redis(R) replicas containers' Security Context seccompProfile
    ## @param replica.containerSecurityContext.capabilities.drop Set Redis(R) replicas containers' Security Context capabilities to drop
    ##
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop: ["ALL"]
    ## @param replica.schedulerName Alternate scheduler for Redis(R) replicas pods
    ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
    ##
    schedulerName: ""
    ## @param replica.updateStrategy.type Redis(R) replicas statefulset strategy type
    ## @skip replica.updateStrategy.rollingUpdate
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#update-strategies
    ##
    updateStrategy:
      ## StrategyType
      ## Can be set to RollingUpdate, OnDelete (statefulset), Recreate (deployment)
      ##
      type: RollingUpdate
    ## @param replica.minReadySeconds How many seconds a pod needs to be ready before killing the next, during update
    ##
    minReadySeconds: 0
    ## @param replica.priorityClassName Redis(R) replicas pods' priorityClassName
    ##
    priorityClassName: ""
    ## @param replica.podManagementPolicy podManagementPolicy to manage scaling operation of %%MAIN_CONTAINER_NAME%% pods
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#pod-management-policies
    ##
    podManagementPolicy: ""
    ## @param replica.automountServiceAccountToken Mount Service Account token in pod
    ##
    automountServiceAccountToken: false
    ## @param replica.hostAliases Redis(R) replicas pods host aliases
    ## https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
    ##
    hostAliases: []
    ## @param replica.podLabels Extra labels for Redis(R) replicas pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    ##
    podLabels: {}
    ## @param replica.podAnnotations Annotations for Redis(R) replicas pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations: {}
    ## @param replica.shareProcessNamespace Share a single process namespace between all of the containers in Redis(R) replicas pods
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/share-process-namespace/
    ##
    shareProcessNamespace: false
    ## @param replica.podAffinityPreset Pod affinity preset. Ignored if `replica.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAffinityPreset: ""
    ## @param replica.podAntiAffinityPreset Pod anti-affinity preset. Ignored if `replica.affinity` is set. Allowed values: `soft` or `hard`
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
    ##
    podAntiAffinityPreset: soft
    ## Node affinity preset
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
    ##
    nodeAffinityPreset:
      ## @param replica.nodeAffinityPreset.type Node affinity preset type. Ignored if `replica.affinity` is set. Allowed values: `soft` or `hard`
      ##
      type: ""
      ## @param replica.nodeAffinityPreset.key Node label key to match. Ignored if `replica.affinity` is set
      ##
      key: ""
      ## @param replica.nodeAffinityPreset.values Node label values to match. Ignored if `replica.affinity` is set
      ## E.g.
      ## values:
      ##   - e2e-az1
      ##   - e2e-az2
      ##
      values: []
    ## @param replica.affinity Affinity for Redis(R) replicas pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
    ## NOTE: `replica.podAffinityPreset`, `replica.podAntiAffinityPreset`, and `replica.nodeAffinityPreset` will be ignored when it's set
    ##
    affinity: {}
    ## @param replica.nodeSelector Node labels for Redis(R) replicas pods assignment
    ## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
    ##
    nodeSelector: {}
    ## @param replica.tolerations Tolerations for Redis(R) replicas pods assignment
    ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    ##
    tolerations: []
    ## @param replica.topologySpreadConstraints Spread Constraints for Redis(R) replicas pod assignment
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
    ## E.g.
    ## topologySpreadConstraints:
    ##   - maxSkew: 1
    ##     topologyKey: node
    ##     whenUnsatisfiable: DoNotSchedule
    ##
    topologySpreadConstraints: []
    ## @param replica.dnsPolicy DNS Policy for Redis(R) replica pods
    ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
    ## E.g.
    ## dnsPolicy: ClusterFirst
    ##
    dnsPolicy: ""
    ## @param replica.dnsConfig DNS Configuration for Redis(R) replica pods
    ## ref: https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/
    ## E.g.
    ## dnsConfig:
    ##   options:
    ##   - name: ndots
    ##     value: "4"
    ##   - name: single-request-reopen
    ##
    dnsConfig: {}
    ## @param replica.lifecycleHooks for the Redis(R) replica container(s) to automate configuration before or after startup
    ##
    lifecycleHooks: {}
    ## @param replica.extraVolumes Optionally specify extra list of additional volumes for the Redis(R) replicas pod(s)
    ##
    extraVolumes: []
    ## @param replica.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Redis(R) replicas container(s)
    ##
    extraVolumeMounts: []
    ## @param replica.sidecars Add additional sidecar containers to the Redis(R) replicas pod(s)
    ## e.g:
    ## sidecars:
    ##   - name: your-image-name
    ##     image: your-image
    ##     imagePullPolicy: Always
    ##     ports:
    ##       - name: portname
    ##         containerPort: 1234
    ##
    sidecars: []
    ## @param replica.initContainers Add additional init containers to the Redis(R) replicas pod(s)
    ## ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
    ## e.g:
    ## initContainers:
    ##  - name: your-image-name
    ##    image: your-image
    ##    imagePullPolicy: Always
    ##    command: ['/bin/bash', '-c', 'echo "hello world"']
    ##
    initContainers: []
    ## Persistence Parameters
    ## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
    ##
    persistence:
      ## @param replica.persistence.enabled Enable persistence on Redis(R) replicas nodes using Persistent Volume Claims
      ##
      enabled: true
      ## @param replica.persistence.medium Provide a medium for `emptyDir` volumes.
      ##
      medium: ""
      ## @param replica.persistence.sizeLimit Set this to enable a size limit for `emptyDir` volumes.
      ##
      sizeLimit: ""
      ##  @param replica.persistence.path The path the volume will be mounted at on Redis(R) replicas containers
      ## NOTE: Useful when using different Redis(R) images
      ##
      path: /data
      ## @param replica.persistence.subPath The subdirectory of the volume to mount on Redis(R) replicas containers
      ## NOTE: Useful in dev environments
      ##
      subPath: ""
      ## @param replica.persistence.subPathExpr Used to construct the subPath subdirectory of the volume to mount on Redis(R) replicas containers
      ##
      subPathExpr: ""
      ## @param replica.persistence.storageClass Persistent Volume storage class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner
      ##
      storageClass: ""
      ## @param replica.persistence.accessModes Persistent Volume access modes
      ##
      accessModes:
        - ReadWriteOnce
      ## @param replica.persistence.size Persistent Volume size
      ##
      size: 8Gi
      ## @param replica.persistence.annotations Additional custom annotations for the PVC
      ##
      annotations: {}
      ## @param replica.persistence.labels Additional custom labels for the PVC
      ##
      labels: {}
      ## @param replica.persistence.selector Additional labels to match for the PVC
      ## e.g:
      ## selector:
      ##   matchLabels:
      ##     app: my-app
      ##
      selector: {}
      ## @param replica.persistence.dataSource Custom PVC data source
      ##
      dataSource: {}
      ## @param replica.persistence.existingClaim Use a existing PVC which must be created manually before bound
      ## NOTE: requires replica.persistence.enabled: true
      ##
      existingClaim: ""
    ## persistentVolumeClaimRetentionPolicy
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
    ## @param replica.persistentVolumeClaimRetentionPolicy.enabled Controls if and how PVCs are deleted during the lifecycle of a StatefulSet
    ## @param replica.persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
    ## @param replica.persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
    ##
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenScaled: Retain
      whenDeleted: Retain
    ## Redis(R) replicas service parameters
    ##
    service:
      ## @param replica.service.type Redis(R) replicas service type
      ##
      type: ClusterIP
      ## @param replica.service.ports.redis Redis(R) replicas service port
      ##
      ports:
        redis: 6379
      ## @param replica.service.nodePorts.redis Node port for Redis(R) replicas
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ## NOTE: choose port between <30000-32767>
      ##
      nodePorts:
        redis: ""
      ## @param replica.service.externalTrafficPolicy Redis(R) replicas service external traffic policy
      ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: Cluster
      ## @param replica.service.internalTrafficPolicy Redis(R) replicas service internal traffic policy (requires Kubernetes v1.22 or greater to be usable)
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service-traffic-policy/
      ##
      internalTrafficPolicy: Cluster
      ## @param replica.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
      ##
      extraPorts: []
      ## @param replica.service.clusterIP Redis(R) replicas service Cluster IP
      ##
      clusterIP: ""
      ## @param replica.service.loadBalancerIP Redis(R) replicas service Load Balancer IP
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP: ""
      ## @param replica.service.loadBalancerClass replicas service Load Balancer class if service type is `LoadBalancer` (optional, cloud specific)
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
      ##
      loadBalancerClass: ""
      ## @param replica.service.loadBalancerSourceRanges Redis(R) replicas service Load Balancer sources
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## e.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param replica.service.annotations Additional custom annotations for Redis(R) replicas service
      ##
      annotations: {}
      ## @param replica.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
      ## If "ClientIP", consecutive client requests will be directed to the same Pod
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      ##
      sessionAffinity: None
      ## @param replica.service.sessionAffinityConfig Additional settings for the sessionAffinity
      ## sessionAffinityConfig:
      ##   clientIP:
      ##     timeoutSeconds: 300
      ##
      sessionAffinityConfig: {}
    ## @param replica.terminationGracePeriodSeconds Integer setting the termination grace period for the redis-replicas pods
    ##
    terminationGracePeriodSeconds: 30
    ## Autoscaling configuration
    ##
    autoscaling:
      ## @param replica.autoscaling.enabled Enable replica autoscaling settings
      ##
      enabled: false
      ## @param replica.autoscaling.minReplicas Minimum replicas for the pod autoscaling
      ##
      minReplicas: 1
      ## @param replica.autoscaling.maxReplicas Maximum replicas for the pod autoscaling
      ##
      maxReplicas: 11
      ## @param replica.autoscaling.targetCPU Percentage of CPU to consider when autoscaling
      ##
      targetCPU: ""
      ## @param replica.autoscaling.targetMemory Percentage of Memory to consider when autoscaling
      ##
      targetMemory: ""
    ## ServiceAccount configuration
    ##
    serviceAccount:
      ## @param replica.serviceAccount.create Specifies whether a ServiceAccount should be created
      ##
      create: true
      ## @param replica.serviceAccount.name The name of the ServiceAccount to use.
      ## If not set and create is true, a name is generated using the common.names.fullname template
      ##
      name: ""
      ## @param replica.serviceAccount.automountServiceAccountToken Whether to auto mount the service account token
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server
      ##
      automountServiceAccountToken: false
      ## @param replica.serviceAccount.annotations Additional custom annotations for the ServiceAccount
      ##
      annotations: {}
    ## Pod Disruption Budget configuration
    ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb
    ## @param replica.pdb.create Enable/disable a Pod Disruption Budget creation
    ## @param replica.pdb.minAvailable [object] Minimum number/percentage of pods that should remain scheduled
    ## @param replica.pdb.maxUnavailable [object] Maximum number/percentage of pods that may be made unavailable. Defaults to `1` if both `replica.pdb.minAvailable` and `replica.pdb.maxUnavailable` are empty.
    ##
    pdb:
      create: true
      minAvailable: ""
      maxUnavailable: ""
    ## @param replica.extraPodSpec Optionally specify extra PodSpec for the Redis(R) replicas pod(s)
    ##
    extraPodSpec: {}
    ## @param replica.annotations Additional custom annotations for Redis(R) replicas resource
    ##
    annotations: {}
  ## @section Redis(R) Sentinel configuration parameters
  ##

  sentinel:
    ## @param sentinel.enabled Use Redis(R) Sentinel on Redis(R) pods.
    ## IMPORTANT: this will disable the master and replicas services and
    ## create a single Redis(R) service exposing both the Redis and Sentinel ports
    ##
    enabled: false
    ## Bitnami Redis(R) Sentinel image version
    ## ref: https://hub.docker.com/r/bitnami/redis-sentinel/tags/
    ## @param sentinel.image.registry [default: REGISTRY_NAME] Redis(R) Sentinel image registry
    ## @param sentinel.image.repository [default: REPOSITORY_NAME/redis-sentinel] Redis(R) Sentinel image repository
    ## @skip sentinel.image.tag Redis(R) Sentinel image tag (immutable tags are recommended)
    ## @param sentinel.image.digest Redis(R) Sentinel image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param sentinel.image.pullPolicy Redis(R) Sentinel image pull policy
    ## @param sentinel.image.pullSecrets Redis(R) Sentinel image pull secrets
    ## @param sentinel.image.debug Enable image debug mode
    ##
    image:
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 8.2.1-debian-12-r0
      digest: ""
      ## Specify a imagePullPolicy
      ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
      ##
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
      ## Enable debug mode
      ##
      debug: false
    ## @param sentinel.annotations Additional custom annotations for Redis(R) Sentinel resource
    ##
    annotations: {}
    ## @param sentinel.masterSet Master set name
    ##
    masterSet: mymaster
    ## @param sentinel.quorum Sentinel Quorum
    ##
    quorum: 2
    ## @param sentinel.getMasterTimeout Amount of time to allow before get_sentinel_master_info() times out.
    ##
    getMasterTimeout: 90
    ## @param sentinel.automateClusterRecovery Automate cluster recovery in cases where the last replica is not considered a good replica and Sentinel won't automatically failover to it.
    ## This also prevents any new replica from starting until the last remaining replica is elected as master to guarantee that it is the one to be elected by Sentinel, and not a newly started replica with no data.
    ## NOTE: This feature requires a "downAfterMilliseconds" value less or equal to 2000.
    ##
    automateClusterRecovery: false
    ## @param sentinel.redisShutdownWaitFailover Whether the Redis(R) master container waits for the failover at shutdown (in addition to the Redis(R) Sentinel container).
    ##
    redisShutdownWaitFailover: true
    ## Sentinel timing restrictions
    ## @param sentinel.downAfterMilliseconds Timeout for detecting a Redis(R) node is down
    ## @param sentinel.failoverTimeout Timeout for performing a election failover
    ##
    downAfterMilliseconds: 60000
    failoverTimeout: 180000
    ## @param sentinel.parallelSyncs Number of replicas that can be reconfigured in parallel to use the new master after a failover
    ##
    parallelSyncs: 1
    ## @param sentinel.configuration Configuration for Redis(R) Sentinel nodes
    ## ref: https://redis.io/topics/sentinel
    ##
    configuration: ""
    ## @param sentinel.command Override default container command (useful when using custom images)
    ##
    command: []
    ## @param sentinel.args Override default container args (useful when using custom images)
    ##
    args: []
    ## @param sentinel.enableServiceLinks Whether information about services should be injected into pod's environment variable
    ##
    enableServiceLinks: true
    ## @param sentinel.preExecCmds Additional commands to run prior to starting Redis(R) Sentinel
    ##
    preExecCmds: []
    ## @param sentinel.extraEnvVars Array with extra environment variables to add to Redis(R) Sentinel nodes
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []
    ## @param sentinel.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Redis(R) Sentinel nodes
    ##
    extraEnvVarsCM: ""
    ## @param sentinel.extraEnvVarsSecret Name of existing Secret containing extra env vars for Redis(R) Sentinel nodes
    ##
    extraEnvVarsSecret: ""
    ## @param sentinel.externalMaster.enabled Use external master for bootstrapping
    ## @param sentinel.externalMaster.host External master host to bootstrap from
    ## @param sentinel.externalMaster.port Port for Redis service external master host
    ##
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    ## @param sentinel.containerPorts.sentinel Container port to open on Redis(R) Sentinel nodes
    ##
    containerPorts:
      sentinel: 26379
    ## Configure extra options for Redis(R) containers' liveness and readiness probes
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param sentinel.startupProbe.enabled Enable startupProbe on Redis(R) Sentinel nodes
    ## @param sentinel.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
    ## @param sentinel.startupProbe.periodSeconds Period seconds for startupProbe
    ## @param sentinel.startupProbe.timeoutSeconds Timeout seconds for startupProbe
    ## @param sentinel.startupProbe.failureThreshold Failure threshold for startupProbe
    ## @param sentinel.startupProbe.successThreshold Success threshold for startupProbe
    ##
    startupProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 22
    ## @param sentinel.livenessProbe.enabled Enable livenessProbe on Redis(R) Sentinel nodes
    ## @param sentinel.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param sentinel.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param sentinel.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param sentinel.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param sentinel.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 6
    ## @param sentinel.readinessProbe.enabled Enable readinessProbe on Redis(R) Sentinel nodes
    ## @param sentinel.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param sentinel.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param sentinel.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param sentinel.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param sentinel.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 6
    ## @param sentinel.customStartupProbe Custom startupProbe that overrides the default one
    ##
    customStartupProbe: {}
    ## @param sentinel.customLivenessProbe Custom livenessProbe that overrides the default one
    ##
    customLivenessProbe: {}
    ## @param sentinel.customReadinessProbe Custom readinessProbe that overrides the default one
    ##
    customReadinessProbe: {}
    ## Persistence parameters
    ## ref: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
    ##
    persistence:
      ## @param sentinel.persistence.enabled Enable persistence on Redis(R) sentinel nodes using Persistent Volume Claims (Experimental)
      ##
      enabled: false
      ## @param sentinel.persistence.storageClass Persistent Volume storage class
      ## If defined, storageClassName: <storageClass>
      ## If set to "-", storageClassName: "", which disables dynamic provisioning
      ## If undefined (the default) or set to null, no storageClassName spec is set, choosing the default provisioner
      ##
      storageClass: ""
      ## @param sentinel.persistence.accessModes Persistent Volume access modes
      ##
      accessModes:
        - ReadWriteOnce
      ## @param sentinel.persistence.size Persistent Volume size
      ##
      size: 100Mi
      ## @param sentinel.persistence.annotations Additional custom annotations for the PVC
      ##
      annotations: {}
      ## @param sentinel.persistence.labels Additional custom labels for the PVC
      ##
      labels: {}
      ## @param sentinel.persistence.selector Additional labels to match for the PVC
      ## e.g:
      ## selector:
      ##   matchLabels:
      ##     app: my-app
      ##
      selector: {}
      ## @param sentinel.persistence.dataSource Custom PVC data source
      ##
      dataSource: {}
      ## @param sentinel.persistence.medium Provide a medium for `emptyDir` volumes.
      ##
      medium: ""
      ## @param sentinel.persistence.sizeLimit Set this to enable a size limit for `emptyDir` volumes.
      ##
      sizeLimit: ""
    ## persistentVolumeClaimRetentionPolicy
    ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/#persistentvolumeclaim-retention
    ## @param sentinel.persistentVolumeClaimRetentionPolicy.enabled Controls if and how PVCs are deleted during the lifecycle of a StatefulSet
    ## @param sentinel.persistentVolumeClaimRetentionPolicy.whenScaled Volume retention behavior when the replica count of the StatefulSet is reduced
    ## @param sentinel.persistentVolumeClaimRetentionPolicy.whenDeleted Volume retention behavior that applies when the StatefulSet is deleted
    ##
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenScaled: Retain
      whenDeleted: Retain
    ## Redis(R) Sentinel resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param sentinel.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if sentinel.resources is set (sentinel.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "nano"
    ## @param sentinel.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param sentinel.containerSecurityContext.enabled Enabled Redis(R) Sentinel containers' Security Context
    ## @param sentinel.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param sentinel.containerSecurityContext.runAsUser Set Redis(R) Sentinel containers' Security Context runAsUser
    ## @param sentinel.containerSecurityContext.runAsGroup Set Redis(R) Sentinel containers' Security Context runAsGroup
    ## @param sentinel.containerSecurityContext.runAsNonRoot Set Redis(R) Sentinel containers' Security Context runAsNonRoot
    ## @param sentinel.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context read-only root filesystem
    ## @param sentinel.containerSecurityContext.allowPrivilegeEscalation Set Redis(R) Sentinel containers' Security Context allowPrivilegeEscalation
    ## @param sentinel.containerSecurityContext.seccompProfile.type Set Redis(R) Sentinel containers' Security Context seccompProfile
    ## @param sentinel.containerSecurityContext.capabilities.drop Set Redis(R) Sentinel containers' Security Context capabilities to drop
    ##
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop: ["ALL"]
    ## @param sentinel.lifecycleHooks for the Redis(R) sentinel container(s) to automate configuration before or after startup
    ##
    lifecycleHooks: {}
    ## @param sentinel.extraVolumes Optionally specify extra list of additional volumes for the Redis(R) Sentinel
    ##
    extraVolumes: []
    ## @param sentinel.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Redis(R) Sentinel container(s)
    ##
    extraVolumeMounts: []
    ## Redis(R) Sentinel service parameters
    ## Note: values passed in this section also configure the master service, unless the sentinel.masterService is explicitly overridden.
    service:
      ## @param sentinel.service.type Redis(R) Sentinel service type
      ##
      type: ClusterIP
      ## @param sentinel.service.ports.redis Redis(R) service port for Redis(R)
      ## @param sentinel.service.ports.sentinel Redis(R) service port for Redis(R) Sentinel
      ##
      ports:
        redis: 6379
        sentinel: 26379
      ## @param sentinel.service.nodePorts.redis Node port for Redis(R)
      ## @param sentinel.service.nodePorts.sentinel Node port for Sentinel
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ## NOTE: choose port between <30000-32767>
      ## NOTE: By leaving these values blank, they will be generated by ports-configmap
      ##       If setting manually, please leave at least replica.replicaCount + 1 in between sentinel.service.nodePorts.redis and sentinel.service.nodePorts.sentinel to take into account the ports that will be created while incrementing that base port
      ##
      nodePorts:
        redis: ""
        sentinel: ""
      ## @param sentinel.service.externalTrafficPolicy Redis(R) Sentinel service external traffic policy
      ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: Cluster
      ## @param sentinel.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
      ##
      extraPorts: []
      ## @param sentinel.service.clusterIP Redis(R) Sentinel service Cluster IP
      ##
      clusterIP: ""
      ## @param sentinel.service.createMaster Enable master service pointing to the current master (experimental)
      ## NOTE: rbac.create need to be set to true
      ##
      createMaster: false

      ## @param sentinel.service.loadBalancerIP Redis(R) Sentinel service Load Balancer IP
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP: ""
      ## @param sentinel.service.loadBalancerClass sentinel service Load Balancer class if service type is `LoadBalancer` (optional, cloud specific)
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
      ##
      loadBalancerClass: ""
      ## @param sentinel.service.loadBalancerSourceRanges Redis(R) Sentinel service Load Balancer sources
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## e.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param sentinel.service.annotations Additional custom annotations for Redis(R) Sentinel service
      ##
      annotations: {}
      ## @param sentinel.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
      ## If "ClientIP", consecutive client requests will be directed to the same Pod
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      ##
      sessionAffinity: None
      ## @param sentinel.service.sessionAffinityConfig Additional settings for the sessionAffinity
      ## sessionAffinityConfig:
      ##   clientIP:
      ##     timeoutSeconds: 300
      ##
      sessionAffinityConfig: {}
      ## Headless service properties
      ##
      headless:
        ## @param sentinel.service.headless.annotations Annotations for the headless service.
        ##
        annotations: {}
        ## @param sentinel.service.headless.extraPorts Optionally specify extra ports to expose for the headless service.
        ## Example:
        ## extraPorts:
        ##   - name: my-custom-port
        ##     port: 12345
        ##     protocol: TCP
        ##     targetPort: 12345
        ##
        extraPorts: []
    ## Redis(R) master service parameters
    ##
    masterService:
      ## @param sentinel.masterService.enabled Enable master service pointing to the current master (experimental)
      ## NOTE: rbac.create need to be set to true
      ##
      enabled: false
      ## @param sentinel.masterService.type Redis(R) Sentinel master service type
      ##
      type: ClusterIP
      ## @param sentinel.masterService.ports.redis Redis(R) service port for Redis(R)
      ##
      ports:
        redis: 6379
      ## @param sentinel.masterService.nodePorts.redis Node port for Redis(R)
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ## NOTE: choose port between <30000-32767>
      ## NOTE: By leaving these values blank, they will be generated by ports-configmap
      ##       If setting manually, please leave at least replica.replicaCount + 1 in between sentinel.service.nodePorts.redis and sentinel.service.nodePorts.sentinel to take into account the ports that will be created while incrementing that base port
      ##
      nodePorts:
        redis: ""
      ## @param sentinel.masterService.externalTrafficPolicy Redis(R) master service external traffic policy
      ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: ""
      ## @param sentinel.masterService.extraPorts Extra ports to expose (normally used with the `sidecar` value)
      ##
      extraPorts: []
      ## @param sentinel.masterService.clusterIP Redis(R) master service Cluster IP
      ##
      clusterIP: ""
      ## @param sentinel.masterService.loadBalancerIP Redis(R) master service Load Balancer IP
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP: ""
      ## @param sentinel.masterService.loadBalancerClass master service Load Balancer class if service type is `LoadBalancer` (optional, cloud specific)
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
      ##
      loadBalancerClass: ""
      ## @param sentinel.masterService.loadBalancerSourceRanges Redis(R) master service Load Balancer sources
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## e.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param sentinel.masterService.annotations Additional custom annotations for Redis(R) master service
      ##
      annotations: {}
      ## @param sentinel.masterService.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
      ## If "ClientIP", consecutive client requests will be directed to the same Pod
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      ##
      sessionAffinity: None
      ## @param sentinel.masterService.sessionAffinityConfig Additional settings for the sessionAffinity
      ## sessionAffinityConfig:
      ##   clientIP:
      ##     timeoutSeconds: 300
      ##
      sessionAffinityConfig: {}
    ## @param sentinel.terminationGracePeriodSeconds Integer setting the termination grace period for the redis-node pods
    ##
    terminationGracePeriodSeconds: 30
    ## @param sentinel.extraPodSpec Optionally specify extra PodSpec for the Redis(R) Sentinel pod(s)
    ##
    extraPodSpec: {}

    externalAccess:
      ## @param sentinel.externalAccess.enabled Enable external access to the Redis
      ##
      enabled: false
      service:
        ## @param sentinel.externalAccess.service.loadBalancerIPAnnotaion Name of annotation to specify fixed IP for service in.
        ##
        loadBalancerIPAnnotaion:
          ""
          ## @param sentinel.externalAccess.service.type Type for the services used to expose every Pod
          ## At this moment only LoadBalancer is supported
          ##
        type: LoadBalancer
        ## @param sentinel.externalAccess.service.redisPort Port for the services used to expose redis-server
        ##
        redisPort: 6379

        ## @param sentinel.externalAccess.service.sentinelPort Port for the services used to expose redis-sentinel
        ##
        sentinelPort:
          26379
          ## @param sentinel.externalAccess.service.loadBalancerIP Array of load balancer IPs for each Redis(R) node. Length must be the same as sentinel.replicaCount
          ##
        loadBalancerIP:
          []
          ## @param sentinel.externalAccess.service.loadBalancerClass Load Balancer class if service type is `LoadBalancer` (optional, cloud specific)
          ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
          ##
        loadBalancerClass:
          ""
          ## @param sentinel.externalAccess.service.loadBalancerSourceRanges Service Load Balancer sources
          ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
          ## e.g:
          ## loadBalancerSourceRanges:
          ##   - 10.10.10.0/24
          ##
        loadBalancerSourceRanges:
          []
          ## @param sentinel.externalAccess.service.annotations Annotations to add to the services used to expose every Pod of the Redis(R) Cluster
          ##
        annotations: {}

  ## @section Other Parameters
  ##

  ## @param serviceBindings.enabled Create secret for service binding (Experimental)
  ## Ref: https://servicebinding.io/service-provider/
  ##
  serviceBindings:
    enabled: false
  ## Network Policy configuration
  ## ref: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    ## @param networkPolicy.enabled Enable creation of NetworkPolicy resources
    ##
    enabled: true
    ## @param networkPolicy.allowExternal Don't require client label for connections
    ## When set to false, only pods with the correct client label will have network access to the ports
    ## Redis(R) is listening on. When true, Redis(R) will accept connections from any source
    ## (with the correct destination port).
    ##
    allowExternal: true
    ## @param networkPolicy.allowExternalEgress Allow the pod to access any range of port and all destinations.
    ##
    allowExternalEgress: true
    ## @param networkPolicy.extraIngress Add extra ingress rules to the NetworkPolicy
    ## e.g:
    ## extraIngress:
    ##   - ports:
    ##       - port: 1234
    ##     from:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    ##
    extraIngress: []
    ## @param networkPolicy.extraEgress Add extra egress rules to the NetworkPolicy
    ## e.g:
    ## extraEgress:
    ##   - ports:
    ##       - port: 1234
    ##     to:
    ##       - podSelector:
    ##           - matchLabels:
    ##               - role: frontend
    ##       - podSelector:
    ##           - matchExpressions:
    ##               - key: role
    ##                 operator: In
    ##                 values:
    ##                   - frontend
    ##
    extraEgress: []
    ## @param networkPolicy.ingressNSMatchLabels Labels to match to allow traffic from other namespaces
    ## @param networkPolicy.ingressNSPodMatchLabels Pod labels to match to allow traffic from other namespaces
    ##
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
    metrics:
      ## @param networkPolicy.metrics.allowExternal Don't require client label for connections for metrics endpoint
      ## When set to false, only pods with the correct client label will have network access to the metrics port
      ##
      allowExternal: true
      ## @param networkPolicy.metrics.ingressNSMatchLabels Labels to match to allow traffic from other namespaces to metrics endpoint
      ## @param networkPolicy.metrics.ingressNSPodMatchLabels Pod labels to match to allow traffic from other namespaces to metrics endpoint
      ##
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
  ## PodSecurityPolicy configuration
  ## ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
  ##
  podSecurityPolicy:
    ## @param podSecurityPolicy.create Whether to create a PodSecurityPolicy. WARNING: PodSecurityPolicy is deprecated in Kubernetes v1.21 or later, unavailable in v1.25 or later
    ##
    create: false
    ## @param podSecurityPolicy.enabled Enable PodSecurityPolicy's RBAC rules
    ##
    enabled: false
  ## RBAC configuration
  ##
  rbac:
    ## @param rbac.create Specifies whether RBAC resources should be created
    ##
    create: false
    ## @param rbac.rules Custom RBAC rules to set
    ## e.g:
    ## rules:
    ##   - apiGroups:
    ##       - ""
    ##     resources:
    ##       - pods
    ##     verbs:
    ##       - get
    ##       - list
    ##
    rules: []
  ## ServiceAccount configuration
  ##
  serviceAccount:
    ## @param serviceAccount.create Specifies whether a ServiceAccount should be created
    ##
    create: true
    ## @param serviceAccount.name The name of the ServiceAccount to use.
    ## If not set and create is true, a name is generated using the common.names.fullname template
    ##
    name: ""
    ## @param serviceAccount.automountServiceAccountToken Whether to auto mount the service account token
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server
    ##
    automountServiceAccountToken: false
    ## @param serviceAccount.annotations Additional custom annotations for the ServiceAccount
    ##
    annotations: {}
  ## Redis(R) Pod Disruption Budget configuration
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  ## @param pdb DEPRECATED Please use `master.pdb` and `replica.pdb` values instead
  ##
  pdb: {}
  ## TLS configuration
  ##
  tls:
    ## @param tls.enabled Enable TLS traffic
    ##
    enabled: false
    ## @param tls.authClients Require clients to authenticate
    ##
    authClients: true
    ## @param tls.autoGenerated Enable autogenerated certificates
    ##
    autoGenerated: false
    ## @param tls.existingSecret The name of the existing secret that contains the TLS certificates
    ##
    existingSecret: ""
    ## @param tls.certificatesSecret DEPRECATED. Use existingSecret instead.
    ##
    certificatesSecret: ""
    ## @param tls.certFilename Certificate filename
    ##
    certFilename: ""
    ## @param tls.certKeyFilename Certificate Key filename
    ##
    certKeyFilename: ""
    ## @param tls.certCAFilename CA Certificate filename
    ##
    certCAFilename: ""
    ## @param tls.dhParamsFilename File containing DH params (in order to support DH based ciphers)
    ##
    dhParamsFilename: ""
  ## @section Metrics Parameters
  ##
  metrics:
    ## @param metrics.enabled Start a sidecar prometheus exporter to expose Redis(R) metrics
    ##
    enabled: false
    ## Bitnami Redis(R) Exporter image
    ## ref: https://hub.docker.com/r/bitnami/redis-exporter/tags/
    ## @param metrics.image.registry [default: REGISTRY_NAME] Redis(R) Exporter image registry
    ## @param metrics.image.repository [default: REPOSITORY_NAME/redis-exporter] Redis(R) Exporter image repository
    ## @skip metrics.image.tag Redis(R) Exporter image tag (immutable tags are recommended)
    ## @param metrics.image.digest Redis(R) Exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param metrics.image.pullPolicy Redis(R) Exporter image pull policy
    ## @param metrics.image.pullSecrets Redis(R) Exporter image pull secrets
    ##
    image:
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.76.0-debian-12-r0
      digest: ""
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## @param metrics.containerPorts.http Metrics HTTP container port
    ##
    containerPorts:
      http: 9121
    ## Configure extra options for Redis(R) containers' liveness, readiness & startup probes
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
    ## @param metrics.startupProbe.enabled Enable startupProbe on Redis(R) replicas nodes
    ## @param metrics.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
    ## @param metrics.startupProbe.periodSeconds Period seconds for startupProbe
    ## @param metrics.startupProbe.timeoutSeconds Timeout seconds for startupProbe
    ## @param metrics.startupProbe.failureThreshold Failure threshold for startupProbe
    ## @param metrics.startupProbe.successThreshold Success threshold for startupProbe
    ##
    startupProbe:
      enabled: false
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    ## @param metrics.livenessProbe.enabled Enable livenessProbe on Redis(R) replicas nodes
    ## @param metrics.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param metrics.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param metrics.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param metrics.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param metrics.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    ## @param metrics.readinessProbe.enabled Enable readinessProbe on Redis(R) replicas nodes
    ## @param metrics.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param metrics.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param metrics.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param metrics.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param metrics.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 3
    ## @param metrics.customStartupProbe Custom startupProbe that overrides the default one
    ##
    customStartupProbe: {}
    ## @param metrics.customLivenessProbe Custom livenessProbe that overrides the default one
    ##
    customLivenessProbe: {}
    ## @param metrics.customReadinessProbe Custom readinessProbe that overrides the default one
    ##
    customReadinessProbe: {}
    ## @param metrics.command Override default metrics container init command (useful when using custom images)
    ##
    command: []
    ## @param metrics.redisTargetHost A way to specify an alternative Redis(R) hostname
    ## Useful for certificate CN/SAN matching
    ##
    redisTargetHost: "localhost"
    ## @param metrics.extraArgs Extra arguments for Redis(R) exporter, for example:
    ## e.g.:
    ## extraArgs:
    ##   check-keys: myKey,myOtherKey
    ##
    extraArgs: {}
    ## @param metrics.extraEnvVars Array with extra environment variables to add to Redis(R) exporter
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param metrics.containerSecurityContext.enabled Enabled Redis(R) exporter containers' Security Context
    ## @param metrics.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param metrics.containerSecurityContext.runAsUser Set Redis(R) exporter containers' Security Context runAsUser
    ## @param metrics.containerSecurityContext.runAsGroup Set Redis(R) exporter containers' Security Context runAsGroup
    ## @param metrics.containerSecurityContext.runAsNonRoot Set Redis(R) exporter containers' Security Context runAsNonRoot
    ## @param metrics.containerSecurityContext.allowPrivilegeEscalation Set Redis(R) exporter containers' Security Context allowPrivilegeEscalation
    ## @param metrics.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context read-only root filesystem
    ## @param metrics.containerSecurityContext.seccompProfile.type Set Redis(R) exporter containers' Security Context seccompProfile
    ## @param metrics.containerSecurityContext.capabilities.drop Set Redis(R) exporter containers' Security Context capabilities to drop
    ##
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop: ["ALL"]
    ## @param metrics.extraVolumes Optionally specify extra list of additional volumes for the Redis(R) metrics sidecar
    ##
    extraVolumes: []
    ## @param metrics.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Redis(R) metrics sidecar
    ##
    extraVolumeMounts: []
    ## Redis(R) exporter resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param metrics.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if metrics.resources is set (metrics.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "nano"
    ## @param metrics.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## @param metrics.podLabels Extra labels for Redis(R) exporter pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
    ##
    podLabels: {}
    ## @param metrics.podAnnotations [object] Annotations for Redis(R) exporter pods
    ## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
    ##
    podAnnotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9121"
    ## Redis(R) exporter service parameters
    ##
    service:
      ## @param metrics.service.enabled Create Service resource(s) for scraping metrics using PrometheusOperator ServiceMonitor, can be disabled when using a PodMonitor
      ##
      enabled: true
      ## @param metrics.service.type Redis(R) exporter service type
      ##
      type: ClusterIP
      ## @param metrics.service.ports.http Redis(R) exporter service port
      ##
      ports:
        http: 9121
      ## @param metrics.service.externalTrafficPolicy Redis(R) exporter service external traffic policy
      ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: Cluster
      ## @param metrics.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
      ##
      extraPorts: []
      ## @param metrics.service.loadBalancerIP Redis(R) exporter service Load Balancer IP
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP: ""
      ## @param metrics.service.loadBalancerClass exporter service Load Balancer class if service type is `LoadBalancer` (optional, cloud specific)
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-loadbalancer
      ##
      loadBalancerClass: ""
      ## @param metrics.service.loadBalancerSourceRanges Redis(R) exporter service Load Balancer sources
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## e.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param metrics.service.annotations Additional custom annotations for Redis(R) exporter service
      ##
      annotations: {}
      ## @param metrics.service.clusterIP Redis(R) exporter service Cluster IP
      ##
      clusterIP: ""
    ## Prometheus Service Monitor
    ## ref: https://github.com/coreos/prometheus-operator
    ##      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ##
    serviceMonitor:
      ## @param metrics.serviceMonitor.port the service port to scrape metrics from
      ##
      port: http-metrics
      ## @param metrics.serviceMonitor.enabled Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator
      ##
      enabled: false
      ## @param metrics.serviceMonitor.namespace The namespace in which the ServiceMonitor will be created
      ##
      namespace: ""
      ## @param metrics.serviceMonitor.interval The interval at which metrics should be scraped
      ##
      interval: 30s
      ## @param metrics.serviceMonitor.scrapeTimeout The timeout after which the scrape is ended
      ##
      scrapeTimeout: ""
      ## @param metrics.serviceMonitor.relabelings Metrics RelabelConfigs to apply to samples before scraping.
      ##
      relabelings: []
      ## @skip metrics.serviceMonitor.relabellings DEPRECATED: Use `metrics.serviceMonitor.relabelings` instead.
      ##
      relabellings: []
      ## @param metrics.serviceMonitor.metricRelabelings Metrics RelabelConfigs to apply to samples before ingestion.
      ##
      metricRelabelings: []
      ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
      ##
      honorLabels: false
      ## @param metrics.serviceMonitor.additionalLabels Additional labels that can be used so ServiceMonitor resource(s) can be discovered by Prometheus
      ##
      additionalLabels: {}
      ## @param metrics.serviceMonitor.podTargetLabels Labels from the Kubernetes pod to be transferred to the created metrics
      ##
      podTargetLabels: []
      ## @param metrics.serviceMonitor.sampleLimit Limit of how many samples should be scraped from every Pod
      ##
      sampleLimit: false
      ## @param metrics.serviceMonitor.targetLimit Limit of how many targets should be scraped
      ##
      targetLimit: false
      ## @param metrics.serviceMonitor.additionalEndpoints  Additional endpoints to scrape (e.g sentinel)
      ##
      additionalEndpoints: []
      # uncomment in order to scrape sentinel metrics, also to in order distinguish between Sentinel and Redis container metrics
      # add metricRelabelings with label like app=redis to main redis pod-monitor port
      # - interval: "30s"
      #   path: "/scrape"
      #   port: "http-metrics"
      #   params:
      #     target: ["localhost:26379"]
      #   metricRelabelings:
      #     - targetLabel: "app"
      #       replacement: "sentinel"
    ## Prometheus Pod Monitor
    ## ref: https://github.com/coreos/prometheus-operator
    ##      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#podmonitor
    ##
    podMonitor:
      ## @param metrics.podMonitor.port the pod port to scrape metrics from
      ##
      port: metrics
      ## @param metrics.podMonitor.enabled Create PodMonitor resource(s) for scraping metrics using PrometheusOperator
      ##
      enabled: false
      ## @param metrics.podMonitor.namespace The namespace in which the PodMonitor will be created
      ##
      namespace: ""
      ## @param metrics.podMonitor.interval The interval at which metrics should be scraped
      ##
      interval: 30s
      ## @param metrics.podMonitor.scrapeTimeout The timeout after which the scrape is ended
      ##
      scrapeTimeout: ""
      ## @param metrics.podMonitor.relabelings Metrics RelabelConfigs to apply to samples before scraping.
      ##
      relabelings: []
      ## @skip metrics.podMonitor.relabellings DEPRECATED: Use `metrics.podMonitor.relabelings` instead.
      ##
      relabellings: []
      ## @param metrics.podMonitor.metricRelabelings Metrics RelabelConfigs to apply to samples before ingestion.
      ##
      metricRelabelings: []
      # - targetLabel: "app"
      #   replacement: "redis"
      ## @param metrics.podMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
      ##
      honorLabels: false
      ## @param metrics.podMonitor.additionalLabels Additional labels that can be used so PodMonitor resource(s) can be discovered by Prometheus
      ##
      additionalLabels: {}
      ## @param metrics.podMonitor.podTargetLabels Labels from the Kubernetes pod to be transferred to the created metrics
      ##
      podTargetLabels: []
      ## @param metrics.podMonitor.sampleLimit Limit of how many samples should be scraped from every Pod
      ##
      sampleLimit: false
      ## @param metrics.podMonitor.targetLimit Limit of how many targets should be scraped
      ##
      targetLimit: false
      ## @param metrics.podMonitor.additionalEndpoints  Additional endpoints to scrape (e.g sentinel)
      ##
      additionalEndpoints: []
      # - interval: "30s"
      #   path: "/scrape"
      #   port: "metrics"
      #   params:
      #     target: ["localhost:26379"]
      #   metricRelabelings:
      #     - targetLabel: "app"
      #       replacement: "sentinel"
    ## Custom PrometheusRule to be defined
    ## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
    ##
    prometheusRule:
      ## @param metrics.prometheusRule.enabled Create a custom prometheusRule Resource for scraping metrics using PrometheusOperator
      ##
      enabled: false
      ## @param metrics.prometheusRule.namespace The namespace in which the prometheusRule will be created
      ##
      namespace: ""
      ## @param metrics.prometheusRule.additionalLabels Additional labels for the prometheusRule
      ##
      additionalLabels: {}
      ## @param metrics.prometheusRule.rules Custom Prometheus rules
      ## e.g:
      ## rules:
      ##   - alert: RedisDown
      ##     expr: redis_up{service="{{ template "common.names.fullname" . }}-metrics"} == 0
      ##     for: 2m
      ##     labels:
      ##       severity: error
      ##     annotations:
      ##       summary: Redis(R) instance {{ "{{ $labels.instance }}" }} down
      ##       description: Redis(R) instance {{ "{{ $labels.instance }}" }} is down
      ##    - alert: RedisMemoryHigh
      ##      expr: >
      ##        redis_memory_used_bytes{service="{{ template "common.names.fullname" . }}-metrics"} * 100
      ##        /
      ##        redis_memory_max_bytes{service="{{ template "common.names.fullname" . }}-metrics"}
      ##        > 90
      ##      for: 2m
      ##      labels:
      ##        severity: error
      ##      annotations:
      ##        summary: Redis(R) instance {{ "{{ $labels.instance }}" }} is using too much memory
      ##        description: |
      ##          Redis(R) instance {{ "{{ $labels.instance }}" }} is using {{ "{{ $value }}" }}% of its available memory.
      ##    - alert: RedisKeyEviction
      ##      expr: |
      ##        increase(redis_evicted_keys_total{service="{{ template "common.names.fullname" . }}-metrics"}[5m]) > 0
      ##      for: 1s
      ##      labels:
      ##        severity: error
      ##      annotations:
      ##        summary: Redis(R) instance {{ "{{ $labels.instance }}" }} has evicted keys
      ##        description: |
      ##          Redis(R) instance {{ "{{ $labels.instance }}" }} has evicted {{ "{{ $value }}" }} keys in the last 5 minutes.
      ##
      rules: []
  ## @section Init Container Parameters
  ##

  ## 'volumePermissions' init container parameters
  ## Changes the owner and group of the persistent volume mount point to runAsUser:fsGroup values
  ##   based on the *podSecurityContext/*containerSecurityContext parameters
  ##
  volumePermissions:
    ## @param volumePermissions.enabled Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`
    ##
    enabled: false
    ## OS Shell + Utility image
    ## ref: https://hub.docker.com/r/bitnami/os-shell/tags/
    ## @param volumePermissions.image.registry [default: REGISTRY_NAME] OS Shell + Utility image registry
    ## @param volumePermissions.image.repository [default: REPOSITORY_NAME/os-shell] OS Shell + Utility image repository
    ## @skip volumePermissions.image.tag OS Shell + Utility image tag (immutable tags are recommended)
    ## @param volumePermissions.image.digest OS Shell + Utility image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param volumePermissions.image.pullPolicy OS Shell + Utility image pull policy
    ## @param volumePermissions.image.pullSecrets OS Shell + Utility image pull secrets
    ##
    image:
      registry: docker.io
      repository: bitnami/os-shell
      tag: 12-debian-12-r51
      digest: ""
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## Init container's resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param volumePermissions.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if volumePermissions.resources is set (volumePermissions.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "nano"
    ## @param volumePermissions.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
    ## Init container Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
    ## @param volumePermissions.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param volumePermissions.containerSecurityContext.runAsUser Set init container's Security Context runAsUser
    ## NOTE: when runAsUser is set to special value "auto", init container will try to chown the
    ##   data folder to auto-determined user&group, using commands: `id -u`:`id -G | cut -d" " -f2`
    ##   "auto" is especially useful for OpenShift which has scc with dynamic user ids (and 0 is not allowed)
    ##
    containerSecurityContext:
      seLinuxOptions: {}
      runAsUser: 0

    ## @param volumePermissions.extraEnvVars Array with extra environment variables to add to volume permissions init container.
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []

  ## Kubectl InitContainer
  ## used by Sentinel to update the isMaster label on the Redis(TM) pods
  ##
  kubectl:
    ## Bitnami Kubectl image version
    ## ref: https://hub.docker.com/r/bitnami/kubectl/tags/
    ## @param kubectl.image.registry [default: REGISTRY_NAME] Kubectl image registry
    ## @param kubectl.image.repository [default: REPOSITORY_NAME/kubectl] Kubectl image repository
    ## @skip kubectl.image.tag Kubectl image tag (immutable tags are recommended), by default, using the current version
    ## @param kubectl.image.digest Kubectl image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param kubectl.image.pullPolicy Kubectl image pull policy
    ## @param kubectl.image.pullSecrets Kubectl pull secrets
    ##
    image:
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.33.4-debian-12-r0
      digest: ""
      ## Specify a imagePullPolicy
      ## ref: https://kubernetes.io/docs/concepts/containers/images/#pre-pulled-images
      ##
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## @param kubectl.command kubectl command to execute
    ##
    command: ["/opt/bitnami/scripts/kubectl-scripts/update-master-label.sh"]
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param kubectl.containerSecurityContext.enabled Enabled kubectl containers' Security Context
    ## @param kubectl.containerSecurityContext.seLinuxOptions [object,nullable] Set SELinux options in container
    ## @param kubectl.containerSecurityContext.runAsUser Set kubectl containers' Security Context runAsUser
    ## @param kubectl.containerSecurityContext.runAsGroup Set kubectl containers' Security Context runAsGroup
    ## @param kubectl.containerSecurityContext.runAsNonRoot Set kubectl containers' Security Context runAsNonRoot
    ## @param kubectl.containerSecurityContext.allowPrivilegeEscalation Set kubectl containers' Security Context allowPrivilegeEscalation
    ## @param kubectl.containerSecurityContext.readOnlyRootFilesystem Set container's Security Context read-only root filesystem
    ## @param kubectl.containerSecurityContext.seccompProfile.type Set kubectl containers' Security Context seccompProfile
    ## @param kubectl.containerSecurityContext.capabilities.drop Set kubectl containers' Security Context capabilities to drop
    ##
    containerSecurityContext:
      enabled: true
      seLinuxOptions: {}
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop: ["ALL"]
    ## Bitnami Kubectl resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param kubectl.resources.limits The resources limits for the kubectl containers
    ## @param kubectl.resources.requests The requested resources for the kubectl containers
    ##
    resources:
      limits: {}
      requests: {}

  ## init-sysctl container parameters
  ## used to perform sysctl operation to modify Kernel settings (needed sometimes to avoid warnings)
  ##
  sysctl:
    ## @param sysctl.enabled Enable init container to modify Kernel settings
    ##
    enabled: false
    ## OS Shell + Utility image
    ## ref: https://hub.docker.com/r/bitnami/os-shell/tags/
    ## @param sysctl.image.registry [default: REGISTRY_NAME] OS Shell + Utility image registry
    ## @param sysctl.image.repository [default: REPOSITORY_NAME/os-shell] OS Shell + Utility image repository
    ## @skip sysctl.image.tag OS Shell + Utility image tag (immutable tags are recommended)
    ## @param sysctl.image.digest OS Shell + Utility image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param sysctl.image.pullPolicy OS Shell + Utility image pull policy
    ## @param sysctl.image.pullSecrets OS Shell + Utility image pull secrets
    ##
    image:
      registry: docker.io
      repository: bitnami/os-shell
      tag: 12-debian-12-r51
      digest: ""
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
    ## @param sysctl.command Override default init-sysctl container command (useful when using custom images)
    ##
    command: []
    ## @param sysctl.mountHostSys Mount the host `/sys` folder to `/host-sys`
    ##
    mountHostSys: false
    ## Init container's resource requests and limits
    ## ref: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
    ## @param sysctl.resourcesPreset Set container resources according to one common preset (allowed values: none, nano, micro, small, medium, large, xlarge, 2xlarge). This is ignored if sysctl.resources is set (sysctl.resources is recommended for production).
    ## More information: https://github.com/bitnami/charts/blob/main/bitnami/common/templates/_resources.tpl#L15
    ##
    resourcesPreset: "nano"
    ## @param sysctl.resources Set container requests and limits for different resources like CPU or memory (essential for production workloads)
    ## Example:
    ## resources:
    ##   requests:
    ##     cpu: 2
    ##     memory: 512Mi
    ##   limits:
    ##     cpu: 3
    ##     memory: 1024Mi
    ##
    resources: {}
  ## @section useExternalDNS Parameters
  ##
  ## @param useExternalDNS.enabled Enable various syntax that would enable external-dns to work.  Note this requires a working installation of `external-dns` to be usable.
  ## @param useExternalDNS.additionalAnnotations Extra annotations to be utilized when `external-dns` is enabled.
  ## @param useExternalDNS.annotationKey The annotation key utilized when `external-dns` is enabled. Setting this to `false` will disable annotations.
  ## @param useExternalDNS.suffix The DNS suffix utilized when `external-dns` is enabled.  Note that we prepend the suffix with the full name of the release.
  ##
  useExternalDNS:
    enabled: false
    suffix: ""
    annotationKey: external-dns.alpha.kubernetes.io/
    additionalAnnotations: {}
